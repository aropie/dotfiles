* General layout and config
** Mac alt fix
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil)
#+END_SRC
** Disable menu, toolbar and scroll
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC
** Transparency
#+BEGIN_SRC emacs-lisp
     (set-frame-parameter (selected-frame) 'alpha '(95 95))
     (add-to-list 'default-frame-alist '(alpha 95 95))
#+END_SRC
** Scroll conservatively
   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 100)
   #+END_SRC
** Disable ring alert
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC
** Startup message
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** Backup tweaks
   #+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.saves")))
  (setq backup-by-copying t)
  (setq delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t)
  #+END_SRC

** Line highlight
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Ediff
   Ediff setings so it won' messup my beautiful tilling wm
#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  ;; Make ediff split horizontally instead of vertically
  (setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC
** Window sizing
    #+BEGIN_SRC emacs-lisp
	(global-set-key (kbd "<C-up>") 'shrink-window)
	(global-set-key (kbd "<C-down>") 'enlarge-window)
	(global-set-key (kbd "<C-left>") 'shrink-window-horizontally)
	(global-set-key (kbd "<C-right>") 'enlarge-window-horizontally)
    #+END_SRC
** Increase GC
Emacs garbage collection is a fairly primitive stop-the-world type.
This means, performance can benefit greatly by increasing the threshold
of memory allocated before GC runs. By default, Emacs will initate GC every
0.76 MB allocated. Since it's no longer 2002, we can bumb that a little.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC
** Disable cursors in other windows
#+BEGIN_SRC emacs-lisp
(setq cursor-in-non-selected-windows nil)
#+END_SRC
* Evil
** Start evil mode
#+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :init (evil-mode 1)
      :config
      (fset 'evil-mouse-drag-region 'ignore))
#+END_SRC
** Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :custom
    (powerline-default-separator 'wave)
    (spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
    :config
    ;; Fix rendering on MacOs
    (if (eq window-system 'ns)
	(setq powerline-image-apple-rgb t))
    (spaceline-spacemacs-theme)
    (spaceline-toggle-hud-off))
#+END_SRC
** Cursor colors
#+BEGIN_SRC emacs-lisp
  (setq evil-emacs-state-cursor '("red" bar))
  (setq evil-normal-state-cursor '("skyblue2" box))
  (setq evil-visual-state-cursor '("gray" box))
  (setq evil-insert-state-cursor '("green" bar))
  (setq evil-replace-state-cursor '("red" hollow))
  (setq evil-operator-state-cursor '("red" hollow))
  (set-face-attribute 'spaceline-evil-emacs nil :background "red")
  (set-face-attribute 'spaceline-evil-insert nil :background "green")
  (set-face-attribute 'spaceline-evil-motion nil :background "skyblue2")
  (set-face-attribute 'spaceline-evil-normal nil :background "skyblue2")
  (set-face-attribute 'spaceline-evil-replace nil :background "red")
  (set-face-attribute 'spaceline-evil-visual nil :background "gray")
#+END_SRC
** Relative line number
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
  (require 'evil-relative-linum)
#+END_SRC** 
** Evil-commentary
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :ensure t
    :init
    (evil-commentary-mode t)
    :delight)
#+END_SRC
** Evil-org
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :delight
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme))))
#+END_SRC
** Surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :init
    (global-evil-surround-mode t))
#+END_SRC
   
* Utils
** General.el
   Manage all the keybindings through general and hydra Ã  la spacemacs
*** Leaders definitions
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-create-definer my-leader
      ;; :prefix my-leader
      :prefix "SPC")
    (general-create-definer my-local-leader
      ;; prefix local-leader
      :prefix "SPC m"))
#+END_SRC
*** Overall bindings
#+BEGIN_SRC emacs-lisp
  (my-leader
   :keymaps 'normal
   "TAB" '(mode-line-other-buffer :which-key "Previous buffer")
   "SPC" '(avy-goto-subword-1 :which-key "Jump to word")
   "f" '(find-file :which-key "Find file")
   "s" '(save-buffer :which-key "Save buffer")
   "b" '(ido-switch-buffer :which-key "Switch buffer")
   "k" '(kill-this-buffer :which-key "Kill this buffer")
   "K" '(kill-buffer-and-window :which-key "Kill this buffer and window")
   "o" '(ace-window :which-key "Change window")
   "c" '(config-visit :which-key "Goto config"))
#+END_SRC
** Avy
   Jump around like there's no tomorrow
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    (my-leader
      :keymaps 'normal
      :infix ","
      "" '(:ignore t :which-key "Jump")
      "w" '(avy-goto-subword-1 :which-key "Jump to word")
      "l" '(avy-goto-line :which-key "Jump to line")
      "c" '(avy-goto-char :which-key "Jump to char")
      "m" '(:ignore t :which-key "Move...")
      "ml" '(avy-move-line :which-key "Move line")
      "mr" '(avy-move-region :which-key "Move region")
      "y" '(:ignore t :which-key "Yank...")
      "yl" '(avy-copy-line :which-key "Yank line")
      "yr" '(avy-copy-region :which-key "Yank region")
      "k" '(:ignore t :which-key "Kill...")
      "kr" '(avy-kill-region :which-key "Kill region between lines")
      "kl" '(avy-kill-whole-line :which-key "Kill line")))
#+END_SRC
** PDF-tools
   Because Emacs' default PDF mode sucks hard
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t)
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (setq yas-snippet-dirs (append yas-snippet-dirs
                                   '("~/.emacs/snippets")))
    (setq yas-triggers-in-field t)
    :init
    (yas-global-mode 1))
#+END_SRC
** Smart Tabs
   Allegedly, the correct way to indent. Unfortunately PEP8, forbids it
#+BEGIN_SRC emacs-lisp
  (use-package smart-tabs-mode
    :ensure t
    :init
    (smart-tabs-insinuate 'c 'javascript 'ruby))
#+END_SRC
** Shell
   Because someday I wish to start using the shell within Emacs. Someday...
*** Don't ask for confirmation when killing shell
#+BEGIN_SRC emacs-lisp
  (defun set-no-process-query-on-exit ()
    (let ((proc (get-buffer-process (current-buffer))))
      (when (processp proc)
        (set-process-query-on-exit-flag proc nil))))

  (add-hook 'term-exec-hook 'set-no-process-query-on-exit)
#+END_SRC
** Try
   For when you're not sure wether you want a package polluting your system
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC
** Org
*** Basic config
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (setq org-log-done t)
  (setq org-enforce-todo-dependencies t)
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
*** Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/org"))
#+END_SRC
*** Org bullets
#+BEGIN_SRC emacs-lisp 
    (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
*** Org-pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :ensure t
    :config
    (setq org-pomodoro-ticking-sound-p t)
    (setq org-pomodoro-ticking-sound-states '(:pomodoro)))
#+END_SRC
*** Twitter-bootstrap export
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+END_SRC
*** Org-capture
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-default-notes-file "~/org/refile.org")
#+END_SRC
*** Refile
#+BEGIN_SRC emacs-lisp
  ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
				   (org-agenda-files :maxlevel . 9))))

  ; Use full outline paths for refile targets - we file directly with IDO
  (setq org-refile-use-outline-path t)

  ; Targets complete directly with IDO
  (setq org-outline-path-complete-in-steps nil)

  ; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC
** Prettify Symbols
   To be fixed...
   #+BEGIN_SRC emacs-lisp
   
   #+END_SRC
** Parenthesis
   I like my parenthesis like I like my waffles: with poor analogies
*** Electric parenthesis
    Force the parenthesis to come in pairs, unlike you, dear reader
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC
*** Rainbow-delimiters
    Visual aid to know which parenthesis is paired to which
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
*** Show-paren
   Highlight matching parenthesis on selection 
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
** Buffers
*** ibuffer
    LEGACY. Use ibuffer instead of the default buffer select screen
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Config edit/reload
   Custom functions to visit and reload config file
*** Edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC
*** Reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
** IDO
   Because IDO's love (and Helm looks way too complicated)
*** Enable IDO mode
#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (setq ido-everywhere t)
#+END_SRC
*** Flex-matching for IDO
A package that improves greatly on the default IDO's flex matching engine
#+BEGIN_SRC emacs-lisp
  (use-package flx-ido
    :ensure t
    :config
    (flx-ido-mode t)
    (setq ido-enable-flex-matching t)
    (setq ido-use-faces nil))
#+END_SRC
*** Smex
    IDO's replacement for M-x
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
*** Grid
    Semi-vertical view of IDO
#+BEGIN_SRC emacs-lisp
  (use-package ido-grid-mode
    :ensure t
    :init
    (ido-grid-mode t))
#+END_SRC
** which-key
   Because Emacs is hard enough without visual aids
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :init
       (setq which-key-idle-delay 0)
       (which-key-mode)
       :delight)
   #+END_SRC
** Ace window
   Window managing made smart
*** use-package
#+BEGIN_SRC emacs-lisp
      (use-package ace-window
	:ensure t 
	:custom
	(aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC
*** Bindings
#+BEGIN_SRC emacs-lisp
  (my-leader
    :keymaps 'normal
    :infix "w"
    "" '(:ignore t :which-key "Windows")
    "s" '(ace-swap-window :which-key "Swap windows")
    "o" '(delete-other-windows :which-key "Delete other windows")
    "x" '(ace-delete-window :which-key "Delete window")
    "h" '(split-window-vertically :which-key "Split window horizontally")
    "v" '(split-window-horizontally :which-key "Split window vertically"))
#+END_SRC
** Dumb-jump
   Jump to definitions
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (my-leader
      :keymaps 'normal
      :infix "d"
      "" '(:ignore t :which-key "Definition")
      "j" '(dumb-jump-go :which-key "Jump to definition")
      "o" '(dumb-jump-go-other-window :which-key "Jump to definition on the other window")
      "l" '(dumb-jump-quick-look :which-key "Look at definition on tooltip")
      "b" '(dumb-jump-back :which-key "Jump back to previous-to-jump position")))
#+END_SRC
** Company
   Auto-completion
*** General
#+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :delight
      :custom
      (company-begin-commands '(self-insert-command))
      (company-idle-delay .1)
      (company-minimum-prefix-length 2)
      (company-show-numbers t)
      (company-tooltip-align-annotations t)
      (global-company-mode t)
      :config
      (defun my/python-mode-hook ()
	(add-to-list 'company-backends 'company-jedi 'company-go))
      (add-hook 'python-mode-hook 'my/python-mode-hook))
#+END_SRC
*** Company-jedi
    Python autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :ensure t
    :after (jedi-mode company)
    :config (add-to-list 'company-backends 'company-jedi))
#+END_SRC
*** Company-quickhelp
#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :ensure t
    :init
    (company-quickhelp-mode 1))
#+END_SRC
** Delight
#+BEGIN_SRC emacs-lisp
  (use-package delight
    :ensure t)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :delight)
#+END_SRC
** Undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :delight)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (my-leader
      :keymaps 'normal
      "g" '(magit-status :which-key "Git status")))
#+END_SRC
** Indent guides
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :delight
    :config
    (setq highlight-indent-guides-responsive 'top)
    (setq highlight-indent-guides-method 'character)
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+END_SRC
** Auto-update
Self explanatory, I'd guess
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-prompt-before-update t)
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC
** All the fonts
   We take advantage of running Emacs as a GUI, and get nice icons for it
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
** Neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :config
     (my-leader
       :keymaps 'normal
       :infix "n"
       "" '(neotree-show :which-key "Neotree"))

    (general-define-key
     :states '(normal visual insert emacs)
     :keymaps 'neotree-mode-map
     "TAB" 'neotree-enter
     "SPC" 'neotree-quick-look
     "q" 'neotree-hide
     "RET" 'neotree-enter
     "g" 'neotree-refresh
     "k" 'neotree-previous-line
     "j" 'neotree-next-line
     "h" 'neotree-select-up-node
     "R" 'neotree-rename-node
     "D" 'neotree-delete-node
     "C" 'neotree-create-node
     "H" 'neotree-hidden-file-toggle))
#+END_SRC
** Theme
 I really like DOOM theme, and has some nice integration with neotree
 #+BEGIN_SRC emacs-lisp
   (use-package doom-themes
     :ensure t
     :config
     (load-theme 'doom-one t)
     (doom-themes-neotree-config))
 #+END_SRC
** Projectile
   Ok, I'll admit it: Projectile's really cool. Really nice project management
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (my-leader
    :keymaps 'normal
    :infix "p"
    "" '(:ignore t :which-key "Project")
    "f" '(projectile-find-file :which-key "Find file")
    "b" '(projectile-switch-to-buffer :which-key "Switch to buffer")
    "k" '(projectile-kill-buffers :which-key "Kill all project buffers")
    "p" '(projectile-switch-open-project :which-key "Switch to open project")
    "r" '(projectile-replace :which-key "Replace in project")
    "s" '(projectile-grep :which-key "Search in project")))
#+END_SRC
* Languages
** Go
 #+BEGIN_SRC emacs-lisp
   (use-package go-mode
     :ensure t)
 #+END_SRC
*** Go-company
 #+BEGIN_SRC emacs-lisp
     (use-package company-go
       :ensure t
       :config
       (add-hook 'go-mode-hook (lambda ()
				 (set (make-local-variable 'company-backends) '(company-go))
				 (company-mode))))
 #+END_SRC
** Web
 #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :init
       (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.json\\'" . web-mode))
       :config
       (setq web-mode-markup-indent-offset 2)
       (setq web-mode-enable-auto-pairing t)
       (setq web-mode-enable-engine-detection t)
       (setq web-mode-enable-css-colorization t))
 #+END_SRC
* LOL
** Nyan mode
#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :ensure t
    :init
    (nyan-mode)
    (nyan-start-animation))
#+END_SRC
** Fireplace
#+BEGIN_SRC emacs-lisp
  (use-package fireplace
    :ensure t
    :disabled
    :init
    (run-with-idle-timer 600 t 'fireplace ()))
#+END_SRC
** Adafruit-wisdom
#+BEGIN_SRC emacs-lisp
  (use-package adafruit-wisdom
    :ensure t
    :disabled)
#+END_SRC
