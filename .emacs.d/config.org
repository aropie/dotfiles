* General layout and config
** Disable menu, toolbar and scroll
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :font "InconsolataLGC Nerd Font"
                      :height 100
                      :weight 'medium)
#+END_SRC
** Transparency
#+BEGIN_SRC emacs-lisp
     (set-frame-parameter (selected-frame) 'alpha '(95 95))
     (add-to-list 'default-frame-alist '(alpha 95 95))
#+END_SRC
** Scroll conservatively
   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 100)
   #+END_SRC
** Disable ring alert
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC
** Startup message
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** Backup tweaks
   #+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.saves")))
  (setq backup-by-copying t)
  (setq delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t)
  #+END_SRC

** Line highlight
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Window sizing
    #+BEGIN_SRC emacs-lisp
	(global-set-key (kbd "<C-up>") 'shrink-window)
	(global-set-key (kbd "<C-down>") 'enlarge-window)
	(global-set-key (kbd "<C-left>") 'shrink-window-horizontally)
	(global-set-key (kbd "<C-right>") 'enlarge-window-horizontally)
    #+END_SRC
* Evil
** Start evil mode
#+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :init (evil-mode 1)
      :config
      (fset 'evil-mouse-drag-region 'ignore))
#+END_SRC
** Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote wave))
    (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
    (spaceline-toggle-buffer-size-off)
    (spaceline-spacemacs-theme))
#+END_SRC
** Cursor colors
#+BEGIN_SRC emacs-lisp
  (setq evil-emacs-state-cursor '("red" bar))
  (setq evil-normal-state-cursor '("orange" box))
  (setq evil-visual-state-cursor '("gray" box))
  (setq evil-insert-state-cursor '("green" bar))
  (setq evil-replace-state-cursor '("red" hollow))
  (setq evil-operator-state-cursor '("red" hollow))
#+END_SRC
** Leader mode
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :init
    (setq evil-leader/in-all-states 1)
    (global-evil-leader-mode)
    :config
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
     "<SPC>" 'avy-goto-char'
     "TAB" 'mode-line-other-buffer'
     "f" 'find-file
     "k" 'kill-buffer-and-window
     "w" 'save-buffer
     "b" 'ido-switch-buffer
     "c" 'config-visit
     "r" 'org-capture
     "o" 'ace-window
     "a" 'org-agenda
     "p" 'org-pomodoro
     "g" 'magit-status
     "0" 'delete-window
     "1" 'delete-other-windows
     "2" 'split-window-vertically
     "3" 'split-window-horizontally))
#+END_SRC
** Relative line number
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
  (require 'evil-relative-linum)
#+END_SRC** Evil-commentary
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :ensure t
    :init
    (evil-commentary-mode t)
    :delight)
#+END_SRC
** Surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :init
    (global-evil-surround-mode t))
#+END_SRC
** Evil-org
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :delight
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme))))
#+END_SRC
   
* Utils
** Org
*** Basic config
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (setq org-log-done t)
  (setq org-enforce-todo-dependencies t)
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
*** Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/org"))
#+END_SRC
*** Org bullets
#+BEGIN_SRC emacs-lisp 
    (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
*** Org-pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :ensure t
    :config
    (setq org-pomodoro-ticking-sound-p t)
    (setq org-pomodoro-ticking-sound-states '(:pomodoro)))
#+END_SRC
*** Twitter-bootstrap export
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+END_SRC
*** Org-capture
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-default-notes-file "~/org/refile.org")
#+END_SRC
*** Refile
#+BEGIN_SRC emacs-lisp
  ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))

  ; Use full outline paths for refile targets - we file directly with IDO
  (setq org-refile-use-outline-path t)

  ; Targets complete directly with IDO
  (setq org-outline-path-complete-in-steps nil)

  ; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC
** Try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC
** Prettify Symbols
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** Parenthesis
*** Electric parenthesis
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC
*** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
*** show-paren
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
** Buffers
*** ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
*** config edit/reload
**** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC
**** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
** IDO
*** Enable IDO mode
#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
#+END_SRC
*** Smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
*** Grid
#+BEGIN_SRC emacs-lisp
  (use-package ido-grid-mode
    :ensure t
    :init
    (ido-grid-mode t))
#+END_SRC
** which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :init
       (which-key-mode)
       :delight)
   #+END_SRC
** rainbow-mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode t))
#+END_SRC
** Ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t)
  (defvar aw-dispatch-alist
    '((?x aw-delete-window " Ace - Delete Window")
      (?s aw-swap-window " Ace - Swap Window")
      (?n aw-flip-window)
      (?c aw-split-window-fair " Ace - Split Fair Window")
      (?v aw-split-window-vert " Ace - Split Vert Window")
      (?h aw-split-window-horz " Ace - Split Horz Window")
      (?i delete-other-windows " Ace - Maximize Window")
      (?o delete-other-windows))
    "List of actions for `aw-dispatch-default'.")
#+END_SRC
** Company
*** General
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :delight
    :config
    (add-hook 'prog-mode-hook 'company-mode)
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)

    (defun my/python-mode-hook ()
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'my/python-mode-hook))
#+END_SRC
*** Company-jedi
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :ensure t)
#+END_SRC
*** Company-quickhelp
#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :ensure t
    :init
    (company-quickhelp-mode 1))
#+END_SRC
** Delight
#+BEGIN_SRC emacs-lisp
  (use-package delight
    :ensure t
    :init
    (delight '((company-mode)
               (which-key-mode)
               (rainbow-mode)
               (evil-commentary-mode)
               (flycheck-mode)
               (undo-tree-mode))))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :delight)
#+END_SRC
** Undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :delight)
#+END_SRC
** Web mode
#+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :init
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
      :config
      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-enable-engine-detection t))
#+END_SRC
** PDF-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
* LOL
** Fireplace
#+BEGIN_SRC emacs-lisp
  ;; (use-package fireplace
  ;;   :ensure t)
  ;; (run-with-idle-timer 600 t 'fireplace ())
#+END_SRC
** Adafruit-wisdom
#+BEGIN_SRC emacs-lisp
  (use-package adafruit-wisdom
    :ensure t)
#+END_SRC
