* Startup optimizations
** Use-package
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  (use-package use-package-ensure-system-package)
#+END_SRC
** Garbage collection
#+BEGIN_SRC emacs-lisp
  (use-package gcmh
    :custom
    (gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
    :init
    (gcmh-mode 1))
#+END_SRC
* General layout and config
** Keeping emacs clean
*** No littering
#+BEGIN_SRC emacs-lisp
  (use-package no-littering)
#+END_SRC
*** Auto-saves
#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+END_SRC

*** Backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . ,(no-littering-expand-var-file-name "backups/")))
        backup-by-copying t
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC

*** Disable custom file
I really dislike ~custom~ writing on ~init.el~ without my permission,
so I disable it altogether
#+BEGIN_SRC emacs-lisp
  (setq custom-file null-device)
#+END_SRC
** Enable narrow mode
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC
** Disable menu, toolbar and scroll
They are visual clutter once you get to know the keybindings (or create your own)
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Mac fixes
*** Mac alt fix
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil)
#+END_SRC
*** Mac path fix
MacOs has problems with paths, so we need to add them manually
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (memq system-type '(darwin windows-nt))
    :config
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "GOPATH"))
#+END_SRC
** Scroll conservatively
Makes Emacs scroll more smoothly
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Disable ring alert
I haven't actually experienced the ring alert, but people often say it's quite
annoying, so better be safe than sorry
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Startup message
I prefer the scratch buffer to greet me when I (rarely) restart Emacs
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Transparency
I like being able to see my wallpaper, even if it's only a little bit
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(98 98))
  (add-to-list 'default-frame-alist '(alpha 98 98))
#+END_SRC
** Disable cursors in other windows
I find confusing having cursors on every window, so I just remove inactive ones
#+BEGIN_SRC emacs-lisp
  (setq cursor-in-non-selected-windows nil)
#+END_SRC
** Help
When opening a help window, always select that window afterwards and move focus to it
#+BEGIN_SRC emacs-lisp
  (setq help-window-select t)
#+END_SRC
** Font
This is supposed to adjust font sizes depending on which screen I'm
working on, but I have yet to find a sweet spot for it
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
      (set-face-attribute 'default nil :height 130)
    (set-face-attribute 'default nil :height 100))
#+END_SRC
** Yes-or-no
Change "yes or no" prompts to "y or n"
#+BEGIN_SRC emacs-lisp
  ;; Emacs 28 has a variable for using short answers, which should
  ;; be preferred if using that version or higher.
  (if (boundp 'use-short-answers)
      (setq use-short-answers t)
    (advice-add 'yes-or-no-p :override #'y-or-n-p))
#+END_SRC
** Auto revert everything
Since I run a lot of automatic linting, I like for all buffers to match the actual file as closely as possible
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
  (setq global-auto-revert-non-file-buffers t)
#+END_SRC
** Correctly set exec-path
#+BEGIN_SRC emacs-lisp
  (defun set-exec-path-from-shell-PATH ()
    "Set up Emacs' `exec-path' and PATH environment variable to match
  that used by the user's shell.

  This is particularly useful under Mac OS X and macOS, where GUI
  apps are not started from a shell."
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$" "" (shell-command-to-string
                                            "$SHELL --login -c 'echo $PATH'"
                                            ))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (set-exec-path-from-shell-PATH)
#+END_SRC
* Utils
** Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC
** General.el
Manage all the keybindings through ~general~ and ~hydra~ Ã  la ~spacemacs~
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-create-definer my-leader
      ;; :prefix my-leader
      :states '(normal insert emacs)
      :keymaps 'override
      :prefix "SPC"
      :non-normal-prefix "M-SPC")
    (general-create-definer my-local-leader
      ;; prefix local-leader
      :states '(normal insert emacs)
      :prefix "SPC m"
      :non-normal-prefix "M-SPC m")
    (general-auto-unbind-keys))
#+END_SRC
** Perspective
#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :custom
    (persp-suppress-no-prefix-key-warning t)
    (persp-modestring-short t)
    (persp-sort 'access)
    :config
    (persp-mode)
    (my-leader
      :infix "TAB"
      "" '(:ignore t :which-key "Persp")
      "TAB" '(persp-switch-last :which-key "Switch to last persp")
      "n" '(persp-switch :which-key "Switch/create to persp")
      "k" '(persp-kill :which-key "Kill persp")
      "r" '(persp-rename :which-key "Rename persp")))
#+END_SRC
*** Persp-projectile
#+BEGIN_SRC emacs-lisp
  (use-package persp-projectile)
#+END_SRC
** Main keybindings
*** File keybindings
#+BEGIN_SRC emacs-lisp
  ;; Taken from https://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/
  (defun aropie/rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))

  (my-leader
    :infix "f"
    "" '(:ignore t :which-key "File")
    "f" '(find-file :which-key "Find file")
    "s" '(save-buffer :which-key "Save file")
    "r" '(aropie/rename-file-and-buffer :which-key "Rename/move this file)")
    "u" '(:ignore t :which-key "Sudo find file (TBD)")
    "U" '(:ignore t :which-key "Sudo this file (TBD)"))
  (my-leader
    "SPC" '(projectile-find-file :which-key "Find file in project")
    "." '(find-file :which-key "Find file")
    "," '(switch-to-buffer :which-key "Switch to buffer"))
#+END_SRC
*** Buffer keybindings
#+BEGIN_SRC emacs-lisp
  (defun aropie/persp-remove-this-buffer ()
    (interactive)
    (persp-remove-buffer (current-buffer)))
  (my-leader
    :infix "b"
    "" '(:ignore t :which-key "Buffer")
    "b" '(consult-buffer :which-key "Switch to workspace buffer")
    "i" '(clone-indirect-buffer :which-key "Clone buffer as indirect buffer")
    "k" '(aropie/persp-remove-this-buffer :which-key "Kill this buffer")
    "r" '(revert-buffer :which-key "Revert buffer")
    "n" '(next-buffer :which-key "Next buffer")
    "p" '(previous-buffer :which-key "Previous buffer")
    "e" '(set-buffer-file-coding-system :which-key "Set buffer coding system"))
  (my-leader
    "," '(consult-buffer :which-key "Switch to workspace buffer"))
#+END_SRC
*** Toggle keybindings
#+BEGIN_SRC emacs-lisp
  (my-leader
	:infix "t"
	"" '(:ignore t :which-key "Toggle")
	"l" '(global-display-line-numbers-mode :which-key "Line numbers")
	"r" '(read-only-mode :which-key "Read only mode")
	"w" '(whitespace-mode :which-key "Whitespace mode")
	"v" '(visual-line-mode :which-key "Visual line mode")
	"t" '(toggle-truncate-lines :which-key "Truncate lines"))
#+END_SRC
*** Open keybindings
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix "o"
    "" '(:ignore t :which-key "Open")
    "c" '(calc :which-key "Calc"))

#+END_SRC
*** Help keybindings
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix "h"
    "" '(:ignore t :which-key "Help")
    "a" '(apropos-command :which-key "Apropos")
    "k" '(describe-key :which-key "Key")
    "f" '(describe-function :which-key "Function")
    "m" '(describe-mode :which-key "Mode")
    "b" '(describe-bindings :which-key "Bindings")
    "v" '(describe-variable :which-key "Variable"))
#+END_SRC
*** Config shortcuts
I tend to modify a lot my config files, so I set shortcuts to the
most used ones
**** Definitions
#+BEGIN_SRC emacs-lisp
  (defun aropie/emacs-config-visit ()
    (interactive)
    (find-file (expand-file-name "config.org" user-emacs-directory)))
  (defun aropie/zsh-config-visit ()
    (interactive)
    (find-file (expand-file-name ".zshrc" (substitute-env-vars "$ZDOTDIR"))))
  (defun aropie/emacs-config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "config.org" user-emacs-directory)))
#+END_SRC
**** Bindings
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix "oC"
    "" '(:ignore t :which-key "Config")
    "e" '(aropie/emacs-config-visit :which-key "emacs")
    "z" '(aropie/zsh-config-visit :which-key "zsh")
    "r" '(aropie/emacs-config-reload :which-key "Reload emacs config"))
#+END_SRC
** Scratch buffer
*** Create/call scratch buffer
Utility function to get *scratch* buffer or create it if it was killed
#+BEGIN_SRC emacs-lisp
  (defun aropie/get-scratch-buffer nil
    "create a scratch buffer"
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (org-mode))
  (my-leader
    :infix "o"
    "s" `(,(if (and (boundp 'persp-mode) (persp-mode))
               'persp-switch-to-scratch-buffer
             'aropie/get-scratch-buffer)
          :which-key "Scratch"))
#+END_SRC
** Which-key
Because Emacs is hard enough without visual aids
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :custom
    (setq which-key-idle-delay 1))
#+END_SRC
** Rg
Ripgrep
#+BEGIN_SRC emacs-lisp
  (use-package rg
    :ensure-system-package (rg . ripgrep))
#+END_SRC
** Vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :custom
    (enable-recursive-minibuffers t)
    (vertico-cycle t)
    :config
    (general-define-key
     :keymaps 'vertico-map
     "C-S-J" 'vertico-next-group
     "C-S-K" 'vertico-previous-group
     "C-j" 'vertico-next
     "C-k" 'vertico-previous)
    (vertico-mode))
#+END_SRC
** Marginalia
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :after vertico
    :general (:keymaps 'minibuffer-local-map
              "M-A" 'marginalia-cycle)
    :init
    (marginalia-mode t))
#+END_SRC
** Orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC
** Consult
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    (general-define-key
     "C-s" 'consult-line
     :keymap minibuffer-local-map
     "C-r" 'consult-history)
    :config
    ;; This allows using consult-buffer restricted to current perspective
    (consult-customize consult--source-buffer :hidden t :default nil)
    (add-to-list 'consult-buffer-sources persp-consult-source)

    (my-leader
      :infix "t"
      "m" '(consult-minor-mode-menu :which-key "Toggle minor mode (i/o/l/g SPC)")
      "M" '(consult-mode-command :which-key "Toggle major mode (l/g/m SPC)"))
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref))
#+END_SRC
** Embark
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings))) ;; alternative for `describe-bindings'
#+END_SRC
** Presentation mode
A mode to enbiggen font for presentations and screen sharing
#+BEGIN_SRC emacs-lisp
  (use-package presentation
    :config
    (defun aropie/presentation-on ()
      (lsp-ui-mode -1))
    (defun aropie/presentation-off ()
      (lsp-ui-mode 1))

    (add-hook 'presentation-on-hook #'aropie/presentation-on)
    (add-hook 'presentation-off-hook #'aropie/presentation-off)

    (my-leader
      :infix "t"
      "p" '(presentation-mode :which-key "Presentation mode")))
#+END_SRC
** Projectile
Projectile's really cool. Very nice project management.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :custom
    (projectile-indexing-method 'alien)
    (projectile-completion-system 'auto)
    :init
    (add-to-list 'projectile-globally-ignored-directories ".venv")
    (projectile-mode t)
    (my-leader
      :infix "p"
      "" '(:ignore t :which-key "Project")
      "f" '(projectile-find-file :which-key "Find file")
      "F" '(projectile-find-file-other-window :which-key "Find file (other window)")
      "b" '(projectile-switch-to-buffer :which-key "Switch to buffer")
      "B" '(projectile-switch-to-buffer-other-window :which-key "Switch to buffer (other window)")
      "k" '(projectile-kill-buffers :which-key "Kill all project buffers")
      "p" '(projectile-persp-switch-project :which-key "Switch to project")
      "t" '(projectile-toggle-between-implementation-and-test :which-key "Toggle between test and implementation")
      "T" '(projectile-test-project :which-key "Run project's tests")
      "a" '(projectile-add-known-project :which-key "Add bookmark to project")
      "r" '(projectile-replace :which-key "Replace in project")
      "c" '(projectile-invalidate-cache :which-key "Clear project's cache")
      "s" '(consult-ripgrep :which-key "Search in project")))
#+END_SRC
*** Persp-projectile
Bind each project to a new persp when opened
#+BEGIN_SRC emacs-lisp
  (use-package persp-projectile
    :straight (:host github :repo "bbatsov/persp-projectile")
    :init
      (my-leader
        :infix "p"
        "p" '(projectile-persp-switch-project :which-key "Switch to project")))
#+END_SRC
** Dumb-jump
Jumping to definitions made simple
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :custom
    (dumb-jump-use-visible-window nil)
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (setq dumb-jump-force-searcher 'rg)
    (my-leader
      :infix "d"
      "" '(:ignore t :which-key "Definition")
      "j" '(dumb-jump-go :which-key "Jump to definition")
      "o" '(dumb-jump-go-other-window :which-key "Jump to definition on the other window")
      "l" '(dumb-jump-quick-look :which-key "Look at definition on tooltip")
      "b" '(dumb-jump-back :which-key "Jump back to previous-to-jump position")))
#+END_SRC

** Helpful
Improves ~help~ buffers adding contextual information and multiple references
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC
** Undo tree
Undoing becomes actually a branching tree, one that I can actually navigate. This is some serious voodoo stuff
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
	:custom ((undo-tree-auto-save-history t)
			 (undo-tree-history-directory-alist `(("." . ,(no-littering-expand-var-file-name "undo-tree-hist/")))))
	:config
	(global-undo-tree-mode t)
	(my-leader
	  :infix "o"
	  "u" '(undo-tree-visualize :which-key "Undo tree")))
#+END_SRC
** Avy
Jump around like there's no tomorrow
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :custom
    (avy-background t)
    (avy-all-windows t)
    :config
    (defun aropie/avy-jump-to-char-in-one-window()
      (interactive)
      (setq current-prefix-arg '(4)) ; C-u
      (call-interactively 'avy-goto-char-2))

    (general-define-key
     :keymaps 'override
     "C-;" 'aropie/avy-jump-to-char-in-one-window)

    (my-leader
      :infix "j"
      "" '(:ignore t :which-key "Jump")
      "w" '(avy-goto-subword-1 :which-key "Jump to word")
      "l" '(avy-goto-line :which-key "Jump to line")
      "c" '(avy-goto-char :which-key "Jump to char")
      "m" '(:ignore t :which-key "Move...")
      "ml" '(avy-move-line :which-key "Move line")
      "mr" '(avy-move-region :which-key "Move region")
      "y" '(:ignore t :which-key "Yank...")
      "yl" '(avy-copy-line :which-key "Yank line")
      "yr" '(avy-copy-region :which-key "Yank region")
      "k" '(:ignore t :which-key "Kill...")
      "kr" '(avy-kill-region :which-key "Kill region between lines")
      "kl" '(avy-kill-whole-line :which-key "Kill line")))
#+END_SRC
** Ace window
Window managing made smart
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    :config
    (winner-mode t)
    (general-define-key
     :states '(normal insert emacs)
     :keymaps 'override
     "C-w C-w" 'ace-window)

    (my-leader
      :infix "w"
      "" '(:ignore t :which-key "Windows")
      "w" '(ace-window :which-key "Change window")
      "u" '(winner-undo :which-key "Undo windows config")
      "s" '(ace-swap-window :which-key "Swap windows")
      "o" '(delete-other-windows :which-key "Delete other windows")
      "x" '(ace-delete-window :which-key "Delete window")
      "h" '(split-window-vertically :which-key "Split window horizontally")
      "v" '(split-window-horizontally :which-key "Split window vertically")
      "r" '(hydra-window-resize/body :which-key "Resize windows")))
#+END_SRC
** Verb
Like [[https://github.com/pashky/restclient.el][restclient.el]], but +better+ with ~org-mode~
#+BEGIN_SRC emacs-lisp
  (use-package verb
    :config
    (my-local-leader
      :keymaps 'verb-mode-map
      :state 'normal
      "m" 'verb-send-request-on-point
      "vv" 'verb-set-var))
#+END_SRC
*** Set local variables to safe
For the custom template I'm using for verb files, I set some variables to ~safe~ in order to avoid prompts everytime I open one of those files
#+BEGIN_SRC emacs-lisp
  (add-to-list 'safe-local-variable-values '(flyspell-mode))
  (add-to-list 'safe-local-variable-values '(org-fontify-emphasized-text))
#+END_SRC
** Persistent scratch
#+BEGIN_SRC emacs-lisp
  (use-package persistent-scratch
    :config
    (persistent-scratch-setup-default)
    (add-hook 'kill-emacs-hook 'persistent-scratch-save))
#+END_SRC
** Ledger
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :hook (ledger-mode . company-mode)
    :custom
    (ledger-complete-in-steps t)
    :config
    (setq ledger-reports '(("balance" "%(binary) -f %(ledger-file) bal")
                          ("real-balance" "%(binary) -f %(ledger-file) bal --cleared --real")
                          ("reg" "%(binary) -f %(ledger-file) reg")
                          ("payee" "%(binary) -f %(ledger-file) reg @%(payee)")
                          ("account" "%(binary) -f %(ledger-file) bal %(account)")))
    (my-local-leader
      :keymaps 'ledger-mode-map
      :state 'normal
      "a" 'ledger-add-transaction
      "b" 'ledger-display-balance-at-point
      "r" 'ledger-report)
    (add-hook 'ledger-mode-hook
              (lambda () (add-hook 'before-save-hook 'ledger-mode-clean-buffer nil 'local))))
#+END_SRC
*** Ledger Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-ledger)
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :straight nil
    :custom
    (dired-listing-switches "-Agho --group-directories-first")
    (dired-recursive-copies 'always)
    (dired-recursive-deletes 'always)
    (dired-dwim-target t)
    (dired-omit-files "^\\.[^.].*")
    :hook ((dired-mode . dired-omit-mode)
           (dired-mode . dired-hide-details-mode))
    :config

    ;; Open dired folders in same buffer
    (put 'dired-find-alternate-file 'disabled nil)

    (general-define-key
     :states 'normal
     :keymaps 'dired-mode-map
     "h" 'dired-up-directory
     "l" 'dired-find-alternate-file)

    (my-leader
      :infix "o"
      "d" '(dired-jump :which-key "Dired"))
    (my-leader
      :keymaps 'dired-mode-map
      :state 'normal
      :infix "t"
      "h" 'dired-omit-mode :which-key "Toggle hidden files"
      "a" 'dired-hide-details-mode :which-key "Toggle full details"))
#+END_SRC
*** Dired narrow
#+BEGIN_SRC emacs-lisp
  (use-package dired-narrow
    :bind (:map dired-mode-map
                ("/" . dired-narrow)))
#+END_SRC
*** Dired colorizing
#+BEGIN_SRC emacs-lisp
  (use-package diredfl
    :hook (dired-mode . diredfl-mode))
#+END_SRC
*** All the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
*** Rainbow
#+BEGIN_SRC emacs-lisp
  (use-package dired-rainbow
    :config
    (progn
      (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
      (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
      (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
      (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
      (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
      (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
      (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
      (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
      (dired-rainbow-define log "#c17d11" ("log"))
      (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
      (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
      (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
      (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
      (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
      (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
      (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
      (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
      (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
      (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
      (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
      ))
#+END_SRC
*** Collapse
#+BEGIN_SRC emacs-lisp
  (use-package dired-collapse
    :hook (dired-mode . dired-collapse-mode))
#+END_SRC
** Make shebang (#!) files executable on save
#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+END_SRC
** Visual Line Mode
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
#+END_SRC
** PDF Tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :init
    (pdf-tools-install))
#+END_SRC
*** PDF restore view
#+BEGIN_SRC emacs-lisp
  (use-package pdf-view-restore
    :after pdf-tools
    :config
    (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))
#+END_SRC
** Debugging
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :config
    (dap-ui-mode 1))
#+END_SRC
* Editing
** Indentation
*** Tabs
**** Use tabs (almost) always
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode t)
#+END_SRC
**** Set default tab size
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC
** Evil
Embrace the anarchy. I love vim's modal editing. I hate vim as an editor
#+BEGIN_QUOTE
Evil will always triumph, because good is dumb.
Spaceballs (1987)
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :requires undo-tree
    :custom
    (evil-undo-system 'undo-tree)
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-respect-visual-line-mode t)
    (setq-default evil-shift-width tab-width)
    :config
    ;; Push xref to the front of goto-defintion functions so it always have priority
    (push 'evil-goto-definition-xref evil-goto-definition-functions)
    (evil-mode 1))
#+END_SRC
*** Evil collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC
*** Evil snipe
#+BEGIN_SRC emacs-lisp
  (use-package evil-snipe
    :custom
    (evil-snipe-smart-case t)
    (evil-snipe-auto-scroll t)
    :init
    (evil-snipe-mode t)
    (evil-snipe-override-mode t)
    ;; Evil-snipe conflicts with Magit
    (add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode))
#+END_SRC
*** Evil args
#+BEGIN_SRC emacs-lisp
  (use-package evil-args
    :config
    ;; bind evil-args text objects
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

    ;; bind evil-forward/backward-args
    (define-key evil-normal-state-map "L" 'evil-forward-arg)
    (define-key evil-normal-state-map "H" 'evil-backward-arg)
    (define-key evil-motion-state-map "L" 'evil-forward-arg)
    (define-key evil-motion-state-map "H" 'evil-backward-arg))
#+END_SRC
*** Evil commentary
Allows to comment word-objects
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :init
    (evil-commentary-mode t))

#+END_SRC
*** Evil surround
Allows to modify surroundings of word-objects
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :init
    (global-evil-surround-mode t))
#+END_SRC
*** Evil exchange
Allows for text objects exchanging
#+BEGIN_SRC emacs-lisp
  (use-package evil-exchange
    :config
    (evil-exchange-install))
#+END_SRC
*** Evil escape
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :config
    (setq-default evil-escape-key-sequence "jk")
    (evil-escape-mode t))
#+END_SRC
*** Evil indent
#+BEGIN_SRC emacs-lisp
  (use-package evil-indent-plus
    :config
    (evil-indent-plus-default-bindings))
#+END_SRC
*** Evil numbers
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :config
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt)
    (define-key evil-visual-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-visual-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))
#+END_SRC
*** Evil multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package evil-mc
	:hook ((prog-mode text-mode) . evil-mc-mode)
	:config
	(defhydra hydra-mc (:color red)
	  "Multiple cursors"
	  ("n" evil-mc-make-and-goto-next-match "Create and next match")
	  ("p" evil-mc-make-and-goto-prev-match "Create and previous match")
	  ("N" evil-mc-skip-and-goto-next-match "Skip to next match")
	  ("P" evil-mc-skip-and-goto-prev-match "Skip to previous match")
	  ("m" evil-mc-make-all-cursors "Create all cursors")
	  ("j" evil-mc-make-cursor-move-next-line "Create and next line")
	  ("k" evil-mc-make-cursor-move-prev-line "Create and previous line")
	  ("q" evil-mc-undo-all-cursors "Undo all cursors" :color blue))
	(general-define-key
	 :states '(normal visual)
	 :keymaps 'override
	 "gr" 'hydra-mc/body))
#+END_SRC
** Electric parenthesis
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
  (setq electric-pair-skip-whitespace nil)
#+END_SRC
** Remove whitespace prior to saving
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Flycheck
Syntax checker and linter on the fly
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))

#+END_SRC
** Tree sitter
#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs
    :init (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
    :config
    (global-tree-sitter-mode))
#+END_SRC
** TS-fold
Code folding based on the tree-sitter syntax tree
#+BEGIN_SRC emacs-lisp
  (use-package ts-fold
    :straight (ts-fold :type git :host github :repo "emacs-tree-sitter/ts-fold")
    :config
    (global-ts-fold-mode))
#+END_SRC
** Better jumper
#+BEGIN_SRC emacs-lisp
  (use-package better-jumper
    :custom (better-jumper-add-jump-behavior 'replace)
    :config
    (general-define-key
     :states '(normal motion)
     "C-o" 'better-jumper-jump-backward
     "C-i" 'better-jumper-jump-forward)
    (better-jumper-mode))
#+END_SRC
** Apheleia
#+BEGIN_SRC emacs-lisp
  (use-package apheleia
    :config
    (apheleia-global-mode t))
#+END_SRC
* Completion
** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook ((lsp-mode . lsp-enable-which-key-integration))
    :custom
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-enable-symbol-highlighting t)
    (lsp-lens-enable t)
    (lsp-eldoc-enable-hover t)
    (lsp-modeline-diagnostics-enable t)
    (lsp-diagnostics-provider 'flycheck)
    (lsp-signature-render-documentation nil)
    (lsp-log-io nil)
    :commands lsp
    :config
    (general-define-key
     :states 'normal
     "gD" 'lsp-find-references)
    (my-leader
  	:infix "c"
  	"" '(:ignore t :which-key "Code")
  	"d" '(dap-hydra :which-key "Debug session")
  	"r" '(lsp-rename :which-key "Rename symbol")))

  (use-package lsp-ui
    :custom
    (lsp-ui-doc-include-signature t)
    (lsp-ui-sideline-enable t)
    (lsp-ui-doc-position 'at-point)
    :hook (lsp-mode . lsp-ui-doc-mode)
    :config
    (my-leader
      :infix "c"
      "i" '(lsp-ui-imenu :which-key "imenu"))
    (general-define-key
     :keymaps '(override lsp-ui-mode-map)
     :states 'normal
     "K" 'lsp-ui-doc-glance
     "<backtab>" 'lsp-ui-doc-focus-frame)
    (general-define-key
     :states 'normal
     :keymaps 'lsp-ui-doc-frame-mode-map
     "q" 'lsp-ui-doc-hide))
#+END_SRC
** Company
My choice for auto-completion
#+BEGIN_SRC emacs-lisp
  (use-package company
	:after lsp-mode
	:hook (prog-mode . company-mode)
	:custom
	(company-begin-commands '(self-insert-command))
	(company-idle-delay 0.0)
	(company-minimum-prefix-length 1)
	(company-show-numbers t)
	(company-dabbrev-code-everywhere t)
	(company-dabbrev-code-other-buffers t)
	(company-dabbrev-downcase nil)
	(company-dabbrev-ignore-case t)
	(company-tooltip-align-annotations t)
	(company-show-quick-access t)
	:config
	(company-tng-configure-default))
#+END_SRC
** Company box
#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+END_SRC
** YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :custom (yas-snippet-dirs `(,(concat user-emacs-directory "templates")))
    :hook (yas-before-expand-snippet . evil-insert-state)
    :init
    (yas-global-mode 1))
#+END_SRC
** File templates
Idea taken from [[http://howardism.org/Technical/Emacs/templates-tutorial.html][here]]
#+BEGIN_SRC emacs-lisp
  (use-package autoinsert
    :custom
    (auto-insert-query nil)
    (auto-insert-directory (concat user-emacs-directory "templates"))
    :hook (find-file . auto-insert)
    :config
    (defun autoinsert-yas-expand()
      "Replace text in yasnippet template."
      (yas-expand-snippet (buffer-string) (point-min) (point-max)))
    (define-auto-insert "\\.py?$" ["default-py.py" autoinsert-yas-expand])
    (define-auto-insert "\\endpoints.org?$" ["default-endpoints.org" autoinsert-yas-expand])
    (define-auto-insert "\\.uml$" ["default-uml.uml" autoinsert-yas-expand])
    (auto-insert-mode t))
#+END_SRC
* UI
** Doom-theme
I like how Doom looks, but it's way too convoluted for my taste, so I just grab their theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-one t)
    (doom-themes-org-config))
#+END_SRC
** Solaire
=Solaire-mode= is an aesthetic plugin designed to visually distinguish "real" buffers (i.e. file-visiting code buffers where you do most of your work) from "unreal" buffers (like popups, sidebars, log buffers, terminals, etc) by giving the latter a slightly different -- often darker -- background
#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :config
    (solaire-global-mode 1))
#+END_SRC
** All the icons
We take advantage of running Emacs as a GUI, and get nice icons for it
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC
** All-the-icons-completion
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+END_SRC
** Doom-modeline
Nice replacement for default mode line
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :defer t
    :custom
    (doom-modeline-buffer-file-name-style 'relative-to-project)
    :config
    (set-face-attribute 'doom-modeline-evil-normal-state nil :foreground "skyblue2")
    (set-face-attribute 'doom-modeline-evil-insert-state nil :foreground "green"))
#+END_SRC

** Cursor colors
Adds visual aid to the modeline to know which mode I'm in
#+BEGIN_SRC emacs-lisp
  (setq evil-emacs-state-cursor '("red" bar))
  (setq evil-normal-state-cursor '("skyblue2" box))
  (setq evil-visual-state-cursor '("gray" box))
  (setq evil-insert-state-cursor '("green" bar))
  (setq evil-replace-state-cursor '("red" hollow))
  (setq evil-operator-state-cursor '("red" hollow))
#+END_SRC

** Rainbow-delimiters
Visual aid to know which parenthesis is paired to which
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Show-paren
Highlight matching parenthesis on selection
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
** Indent guides
Visual aid for indentation
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :config
    (setq highlight-indent-guides-responsive 'top)
    (setq highlight-indent-guides-method 'character)
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+END_SRC

** Line highlight
Highlights current line to aid with quick cursor finding
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Pretty symbols
In emacs 24.4 we got prettify-symbols-mode which replaces things like lambda with Î». This can help make the code easier to read. The inhibit-compacting-font-caches stops garbage collect from trying to handle font caches which makes things a lot faster and saves us ram.
#+BEGIN_SRC emacs-lisp
  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (setq inhibit-compacting-font-caches t)
#+END_SRC
These symbols are the basics I like enabled for all ~prog-mode~ modes.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda ()
              (push '("!=" . ?â ) prettify-symbols-alist)
              (push '("<=" . ?â¤) prettify-symbols-alist)
              (push '(">=" . ?â¥) prettify-symbols-alist)
              (push '("=>" . ?â) prettify-symbols-alist)))
#+END_SRC
** Nyan mode
#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :config
    (nyan-mode)
    (nyan-start-animation))
#+END_SRC
** Visual fill column
#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
	:defer t
	:custom
	(visual-fill-column-width 110)
	(visual-fill-column-center-text t)
	(visual-fill-column-enable-sensible-window-split t))
#+END_SRC
** SVG-Tags
#+BEGIN_SRC emacs-lisp
  (use-package svg-tag-mode)
#+END_SRC
** Hide mode-line
To be used in hooks for hiding the mode-line, mainly inferior-modes (ie shells, REPLs, etc)
#+BEGIN_SRC emacs-lisp
  (use-package hide-mode-line)
#+END_SRC
* Org
** Basic config
#+BEGIN_SRC emacs-lisp
  (defun aropie/org-mode-setup ()
	(visual-fill-column-mode t)
	(setq evil-auto-indent nil))

  (use-package org
	:defer t
	:hook (org-mode . aropie/org-mode-setup)
	:custom
	(org-src-window-setup 'current-window)
	(org-log-done 'time)
	(org-log-into-drawer t)
	(org-agenda-start-with-log-time t)
	(org-enforce-todo-dependencies t)
	(org-hide-emphasis-markers t)
	(org-confirm-babel-evaluate nil)
	(org-ellipsis " â¾")
	(org-src-fontify-natively t)
	(org-fontify-quote-and-verse-blocks t)
	(org-src-tab-acts-natively t)
	(org-src-preserve-indentation nil)
	(org-startup-folded t)
	(org-cycle-separator-lines 2)
	(org-tags-column 0)
	(org-pretty-entities t)
	(org-use-sub-superscripts nil)
	:config
	(add-to-list 'org-structure-template-alist '("el" . "SRC emacs-lisp"))
	(add-to-list 'org-structure-template-alist '("sh" . "SRC sh"))
	(add-to-list 'org-structure-template-alist '("sho" . "SRC sh :results output"))
	(add-to-list 'org-export-backends 'md)
	(add-to-list 'org-export-backends 'beamer)

	;; Load languages functionality into Org Babel
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '((shell . t)))

	(my-local-leader
	  :keymaps 'org-mode-map
	  :state 'normal
	  "t" 'org-set-tags-command
	  "m" 'org-insert-structure-template)

	(general-define-key
	 :states 'normal
	 :keymaps 'org-mode-map
	 "TAB" 'org-cycle))
#+END_SRC
** Org Roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/RoamNotes")
    :init (setq org-roam-v2-ack t)
    :config
    (org-roam-db-autosync-mode)
    (my-leader
      :infix "o"
      "n" '(org-roam-node-find :which-key "Notes")))
#+END_SRC
** Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Org"))
#+END_SRC
** Org modern
#+BEGIN_SRC emacs-lisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode))
#+END_SRC
** Org modern indent
#+BEGIN_SRC emacs-lisp
  (use-package org-modern-indent
    :straight (org-modern-indent :type git :host github :repo "jdtsmith/org-modern-indent")
    :config ; add late to hook
    (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+END_SRC
** Org-pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :defer t
    :config
    (setq org-pomodoro-ticking-sound-p t)
    (setq org-pomodoro-ticking-sound-states '(:pomodoro)))
#+END_SRC
** Org-capture
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-default-notes-file "~/Org/refile.org")
#+END_SRC
** Refile
#+BEGIN_SRC emacs-lisp
                                          ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
                                          ; Use full outline paths for refile targets - we file directly with IDO
  (setq org-refile-use-outline-path t)

                                          ; Targets complete directly with IDO
  (setq org-outline-path-complete-in-steps nil)

                                          ; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC
** Org fancy priorities
#+BEGIN_SRC emacs-lisp
  (use-package org-fancy-priorities
    :hook
    (org-mode . org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list '((?A . "â")
                                      (?B . "â¬")
                                      (?C . "â¬")
                                      (?D . "â")
                                      (?1 . "â¡")
                                      (?2 . "â®¬")
                                      (?3 . "â®®")
                                      (?4 . "â")
                                      (?I . "Important"))))
#+END_SRC
** SVG tags
#+BEGIN_SRC emacs-lisp
  ;; Disabling until https://github.com/rougier/svg-lib/issues/18 is resolved
  ;; because it breaks daemon mode
  ;; (add-hook 'org-mode-hook
  ;;           (lambda ()
  ;;             (setq svg-tag-tags '(
  ;;                                  ;; Org tags
  ;;                                  (":\\([A-Za-z0-9-_]+\\)" . ((lambda (tag) (svg-tag-make tag :face 'org-tag))))

  ;;                                  ;; TODO / DONE
  ;;                                  ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
  ;;                                  ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))))
  ;;             (svg-tag-mode t)))

#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix "g"
    "" '(:ignore t :which-key "Git")
    "g" '(magit-status :which-key "Status")
    "m" '(magit-dispatch-popup :which-key "Menu")
    "c" '(magit-clone :which-key "Clone")
    "b" '(magit-branch :which-key "Branch")
    "B" '(magit-blame :which-key "Blame")
    "l" '(magit-log :which-key "Log")
    "F" '(magit-pull :which-key "Pull")
    "t" '(git-timemachine :which-key "Travel through time"))
#+END_SRC
** Magit
Git porcelain inside Emacs. Git turned into loving hugs and kisses
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :custom
    (transient-default-level 5)
    (magit-diff-refine-hunk t "Show granular diffs in selected hunk")
    ;; Don't display parent/related refs in commit buffers; they are rarely
    ;; helpful and only add to runtime costs.
    (magit-revision-insert-related-refs nil)
    (magit-commit-show-diff nil)
    :hook (git-commit-mode . evil-insert-state)
    :config
    (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-assume-unchanged-files 'magit-insert-stashes))
#+END_SRC
** Timemachine
Take your code for a travel through time (that is incidentally, highly dependant on your commits)
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :straight (:host nil :repo "https://codeberg.org/pidu/git-timemachine"
               :branch "master")
    :after hydra
    :config
    (defhydra hydra-timemachine (:color pink)
      "Time machine"
      ("n" git-timemachine-show-next-revision "next")
      ("p" git-timemachine-show-previous-revision "previous")
      ("c" git-timemachine-show-current-revision "current")
      ("b" git-timemachine-blame "blame")
      ("s" git-timemachine-switch-branch "switch branch")
      ("q" (kill-matching-buffers "timemachine" t t) "quit" :color blue))

    (add-hook 'git-timemachine-mode-hook
              (lambda () (hydra-timemachine/body))))
#+END_SRC
* Languages
** Lisp
*** Arg delimiters
#+BEGIN_SRC emacs-lisp
  (add-hook 'lisp-data-mode-hook (lambda () (setq-local evil-args-delimiters '(" "))))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
	:hook
	(python-mode . lsp-deferred)
	(inferior-python-mode . hide-mode-line-mode)
	:config
	(setq flycheck-flake8-maximum-line-length 88)
	(setq lsp-clients-python-library-directories '("/usr/" "~/.local/bin/"))
	(add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\venv\\'")
	(add-hook 'python-mode-hook
			  (lambda ()
				(setq indent-tabs-mode nil)
				(local-unset-key (kbd "<backspace>"))
				(local-unset-key (kbd ":")))))
#+END_SRC
*** Linter
[[https://github.com/charliermarsh/ruff][Ruff]] is an extremely fast Python linter which integrates [[https://beta.ruff.rs/docs/rules/][a lot]] of different linters into one
#+BEGIN_SRC emacs-lisp
  (flycheck-define-checker python-ruff
    "A Python syntax and style checker using the ruff utility.
  To override the path to the ruff executable, set
  `flycheck-python-ruff-executable'.
  See URL `http://pypi.python.org/pypi/ruff'."
    :command ("ruff"
              "--format=text"
              (eval (when buffer-file-name
                      (concat "--stdin-filename=" buffer-file-name)))
              "-")
    :standard-input t
    :error-filter (lambda (errors)
                    (let ((errors (flycheck-sanitize-errors errors)))
                      (seq-map #'flycheck-flake8-fix-error-level errors)))
    :error-patterns
    ((warning line-start
              (file-name) ":" line ":" (optional column ":") " "
              (id (one-or-more (any alpha)) (one-or-more digit)) " "
              (message (one-or-more not-newline))
              line-end))
    :modes python-mode)

  (add-to-list 'flycheck-checkers 'python-ruff)

  (flycheck-add-next-checker 'python-ruff 'python-pyright)
#+END_SRC
*** Language Server
#+BEGIN_SRC emacs-lisp
  (use-package lsp-pyright
    :custom
    (lsp-pyright-multi-root nil))
#+END_SRC
*** Enable Venv automatically
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv-auto
	:custom
	(pyvenv-auto-venv-dirnames '("venv" ".venv"))
	:hook (python-mode . pyvenv-auto-run)
	:init
	(add-hook 'pyvenv-post-activate-hooks 'lsp-deferred))
#+END_SRC
*** Pytest dispatcher
#+BEGIN_SRC emacs-lisp
  (use-package python-pytest
    :config
    (my-local-leader
      :keymaps 'python-mode-map
      :state 'normal
      "t" 'python-pytest-dispatch))
#+END_SRC
*** Autoformat
#+BEGIN_SRC emacs-lisp
  ;; Add autoflake as an Apheleia formatter
  (add-to-list 'apheleia-formatters '(autoflake . ("autoflake" "-")))

  ;; Configure autoflake independently of it being added as a formatter
  (setf (alist-get 'autoflake apheleia-formatters)
        '("autoflake" "--remove-all-unused-imports" "-"))
  (setf (alist-get 'isort apheleia-formatters)
        '("isort" "--profile=black" "--stdout" "-"))

  ;; Define order of formatters execution
  (setf (alist-get 'python-mode apheleia-mode-alist)
        '(autoflake isort black))
#+END_SRC
*** SVG tags
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
            (lambda ()
              (setq svg-tag-tags
                    '(("# TODO[([:alpha:][:blank:])]*[\b:]*" .
                       ((lambda (tag) (svg-tag-make tag
                                                    :face 'org-todo
                                                    :inverse t
                                                    :crop-right t
                                                    :padding 0
                                                    :beg 2
                                                    :end -1
                                                    :alignment 1))))
                      ("# TODO[([:alpha:][:blank:])]*[\b:]*\\(.*\\)" .
                       ((lambda (tag) (svg-tag-make tag :face 'org-todo :crop-left t))))))
              (svg-tag-mode t)))

#+END_SRC

*** Pretty symbols
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
            (lambda ()
              (push '("def"    . ?Æ) prettify-symbols-alist)
              (push '("sum"    . ?Î£) prettify-symbols-alist)
              (push '("**2"    . ?Â²) prettify-symbols-alist)
              (push '("**3"    . ?Â³) prettify-symbols-alist)
              (push '("None"   . ?â) prettify-symbols-alist)
              (push '("in"     . ?â) prettify-symbols-alist)
              (push '("not in" . ?â) prettify-symbols-alist)
              (push '("return" . ?â¡) prettify-symbols-alist)
              (prettify-symbols-mode t)))
#+END_SRC

*** Debugging
#+BEGIN_SRC emacs-lisp
  (require 'dap-python)
  ;; if you installed debugpy, you need to set this
  ;; https://github.com/emacs-lsp/dap-mode/issues/306
  (setq dap-python-debugger 'debugpy)
#+END_SRC
** JavaScript
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :hook
    (js-mode . lsp-deferred)
    (js-mode . js2-minor-mode)
    :custom
    (js2-highlight-level 3)
    (js-indent-level 2))
#+END_SRC
** PHP
#+BEGIN_SRC emacs-lisp
  (use-package php-mode)
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :config
    (my-local-leader
      :keymaps 'haskell-mode-map
      :state 'normal
      "m" 'haskell-interactive-switch
      "l" 'haskell-process-load-file)
    (my-local-leader
      :keymaps 'haskell-interactive-mode-map
      :state 'normal
      "m" 'haskell-interactive-switch-back))
#+END_SRC
** Markup
*** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :hook (yaml-mode . highlight-indent-guides-mode))
#+END_SRC
*** CSV
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :init
    (add-hook 'csv-mode-hook
              (lambda ()
                (csv-align-mode 1)
                (visual-line-mode -1)
                (toggle-truncate-lines t)))
    :config
    (general-define-key
     :keymaps 'csv-mode-map
     :states 'normal
     "L" 'csv-forward-field
     "H" 'csv-backward-field)
    (my-local-leader
      :keymaps 'csv-mode-map
      :states 'normal
      "a" '(csv-align-mode :which-key "Toggle align-mode")
      "h" '(csv-header-line :which-key "Toggle header")
      "s" '(csv-sort-fields :which-key "Sort fields")))
#+END_SRC
** Bash
*** Linter
[[https://github.com/koalaman/shellcheck][ShellCheck]] is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts
#+BEGIN_SRC emacs-lisp
  (use-package sh-script
	:ensure nil
	:hook (sh-mode . lsp-deferred))
#+END_SRC
*** Autoformat
#+BEGIN_SRC emacs-lisp
   ;; The following formatting flags closely resemble Google's shell style defined in
   ;;       https://google.github.io/styleguide/shellguide.html
  (setf (alist-get 'shfmt apheleia-formatters)
		'("shfmt" "-i" "2" "-ci" "-bn"))
  (setf (alist-get 'sh-mode apheleia-mode-alist)
		'(shfmt))
#+END_SRC
** DSL
*** Jenkinsfile
#+BEGIN_SRC emacs-lisp
  (use-package jenkinsfile-mode)
#+END_SRC
*** PlantUML
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :straight (:host github :repo "radian-software/el-patch"
                        :fork "a1exsh")
    :custom
    (plantuml-default-exec-mode 'executable)
    :config
    (setq plantuml-output-type "png")
    (add-to-list 'auto-mode-alist '("\\.uml\\'" . plantuml-mode)))
#+END_SRC
*** Dockerfile
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC
* Packages to consider
- https://cestlaz.github.io/post/using-emacs-57-dired-narrow/
- https://github.com/akhramov/org-wild-notifier.el
- https://github.com/mineo/yatemplate
- https://github.com/karthink/popper
- [[https://github.com/ankurdave/color-identifiers-mode]]
