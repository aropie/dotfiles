* Startup optimizations
** Cache
Many modes store their cache files in =~/.emacs.d=. I prefer to keep
those files in =~/.cache/emacs=
#+BEGIN_SRC emacs-lisp
  (setq user-emacs-directory "~/.cache/emacs/")
  (if (not (file-directory-p user-emacs-directory))
      (make-directory user-emacs-directory t))
  (setq auto-save-list-file-prefix user-emacs-directory)
  (setq package-user-dir "~/.cache/emacs/elpa")
#+END_SRC
** Package initialize
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("gnu" . "https://elpa.gnu.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")))
  (package-initialize)
#+END_SRC
** Use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)
#+END_SRC
** Garbage collection
#+BEGIN_SRC emacs-lisp
  (use-package gcmh
    :custom
    (gcmh-verbose t)
    (gcmh-idle-delay 0.5)
    (gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
    :init
    (gcmh-mode 1))
#+END_SRC
* General layout and config
** Use spaces instead of tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
** Enable narrow mode
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC
** Disable menu, toolbar and scroll
They are visual clutter once you get to know the keybindings (or create your own)
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Defuse custom file
I really dislike custom writing on init.el without my permission,
so I disable it altogether
#+BEGIN_SRC emacs-lisp
  (setq custom-file null-device)
#+END_SRC
** Mac fixes
*** Mac alt fix
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil)
#+END_SRC
*** Mac path fix
MacOs has problems with paths, so we need to add them manually
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :config
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "GOPATH"))
#+END_SRC
** Scroll conservatively
Makes Emacs scroll more smoothly
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Disable ring alert
I haven't actually experienced the ring alert, but people often say it's quite
annoying, so better be safe than sorry
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Startup message
I prefer the scratch buffer to greet me when I (rarely) restart Emacs
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Backup tweaks
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.saves")))
  (setq backup-by-copying t)
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC
** Transparency
I like being able to see my wallpaper. Call me a romantic if you like
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(98 98))
  (add-to-list 'default-frame-alist '(alpha 98 98))
#+END_SRC
** Disable cursors in other windows
I find confusing having cursors on every window, so I just remove inactive ones
#+BEGIN_SRC emacs-lisp
  (setq cursor-in-non-selected-windows nil)
#+END_SRC
** Help
When opening a help window, always select that window
afterwards and move focus to it.
#+BEGIN_SRC emacs-lisp
  (setq help-window-select t)
#+END_SRC
** Font
This is supposed to adjust font sizes depending on which screen I'm
working on, but I have yet to find a sweet spot for it
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :height 100)
#+END_SRC
* Utils
** General.el
Manage all the keybindings through general and hydra Ã  la spacemacs
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-create-definer my-leader
      ;; :prefix my-leader
      :states '(normal insert emacs)
      :keymaps 'override
      :prefix "SPC"
      :non-normal-prefix "M-SPC")
    (general-create-definer my-local-leader
      ;; prefix local-leader
      :states '(normal insert emacs)
      :prefix "SPC m"
      :non-normal-prefix "M-SPC m")
    (my-local-leader
      "m" '(semantic-or-imenu :which-key "Imenu")))
#+END_SRC
** Main keybindings
*** File keybindings
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix "f"
    "" '(:ignore t :which-key "File")
    "f" '(find-file :which-key "Find file")
    "s" '(save-buffer :which-key "Save file")
    "u" '(:ignore t :which-key "Sudo find file (TBD)")
    "U" '(:ignore t :which-key "Sudo this file (TBD)")
    "R" '(:ignore t :which-key "Rename/move this file (TBD)"))
  (my-leader
    "SPC" '(projectile-find-file :which-key "Find file in project")
    "." '(find-file :which-key "Find file")
    "," '(switch-to-buffer :which-key "Switch to buffer"))
#+END_SRC
*** Buffer keybindings
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix "b"
    "" '(:ignore t :which-key "Buffer")
    "b" '(persp-switch-to-buffer :which-key "Switch to workspace buffer")
    "B" '(switch-to-buffer :which-key "Switch to buffer")
    "i" '(ibuffer :which-key "ibuffer")
    "k" '(kill-this-buffer :which-key "Kill buffer")
    "r" '(revert-buffer :which-key "Revert buffer")
    "n" '(next-buffer :which-key "Next buffer")
    "p" '(previous-buffer :which-key "Previous buffer")
    "e" '(set-buffer-file-coding-system :which-key "Set buffer coding system"))
  (my-leader
    "," '(persp-switch-to-buffer :which-key "Switch to workspace buffer"))
#+END_SRC
*** Toggle keybindings
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix "t"
    "" '(:ignore t :which-key "Toggle")
    "l" '(global-linum-mode :which-key "Line numbers")
    "r" '(read-only-mode :which-key "Read only mode")
    "w" '(whitespace-mode :which-key "Whitespace mode"))
#+END_SRC
*** Open keybindings
#+BEGIN_SRC emacs-lisp
  (defun aropie/open-notes ()
    (interactive)
    (counsel-find-file "~/Org"))
  (my-leader
    :infix "o"
    "" '(:ignore t :which-key "Open")
    "d" '(dired-jump :which-key "Dired")
    "s" '(get-scratch-buffer :which-key "Scratch")
    "n" '(aropie/open-notes :which-key "Notes"))
#+END_SRC
*** Help keybindings
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix "h"
    "" '(:ignore t :which-key "Help")
    "a" '(apropos-command :which-key "Apropos")
    "k" '(describe-key :which-key "Key")
    "f" '(describe-function :which-key "Function")
    "m" '(describe-mode :which-key "Mode")
    "b" '(describe-bindings :which-key "Bindings")
    "v" '(describe-variable :which-key "Variable"))
#+END_SRC
*** Config shortcuts
I tend to modify a lot my config files, so I set shortcuts to the
most used ones
**** Definitions
#+BEGIN_SRC emacs-lisp
  (defun aropie/emacs-config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (defun aropie/i3-config-visit ()
    (interactive)
    (find-file "~/.config/i3/config"))
  (defun aropie/keybindings-config-visit ()
    (interactive)
    (find-file "~/.config/sxhkd/sxhkdrc"))
  (defun aropie/zsh-config-visit ()
    (interactive)
    (find-file "~/.zshrc"))
  (defun aropie/xinit-config-visit ()
    (interactive)
    (find-file "~/.xinitrc"))
  (defun aropie/emacs-config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
**** Bindings
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix "c"
    "" '(:ignore t :which-key "Config")
    "e" '(aropie/emacs-config-visit :which-key "emacs")
    "i" '(aropie/i3-config-visit :which-key "i3")
    "z" '(aropie/zsh-config-visit :which-key "zsh")
    "k" '(aropie/keybindings-config-visit :which-key "keybindings")
    "x" '(aropie/xinit-config-visit :which-key "xinitrc")
    "r" '(aropie/emacs-config-reload :which-key "Reload emacs config"))
#+END_SRC
** Which-key
Because Emacs is hard enough without visual aids
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :custom
    (setq which-key-idle-delay 1))
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :custom
    (ivy-wrap t)
    (ivy-height 15)
    :config
    (general-define-key
     :keymaps 'ivy-minibuffer-map
     "C-j" 'ivy-next-line
     "C-k" 'ivy-previous-line
     "C-l" 'ivy-alt-done
     "C-o" 'ivy-dispatching-done
     "C-O" 'ivy-occur
     "C-SPC" 'ivy-call)
    (ivy-mode 1))
#+END_SRC
*** Ivy-rich
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :config
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
    (ivy-rich-mode t))
#+END_SRC
*** Ivy-xref
#+BEGIN_SRC emacs-lisp
  (use-package ivy-xref
    :custom
    (setq xref-show-definitions-function #'ivy-xref-show-defs)
    (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))
#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :config
    (counsel-mode t)
    (general-define-key
     "M-y" 'counsel-yank-pop))
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :config
    (general-define-key
     "C-s" 'counsel-grep-or-swiper))
#+END_SRC
** Presentation mode
A mode to enbiggen font for presentations and screen sharing
#+BEGIN_SRC emacs-lisp
  (use-package presentation
    :config
    (my-leader
      :infix "t"
      "p" '(presentation-mode :which-key "Presentation mode")))
#+END_SRC
** Try
For when you're not sure wether you want a package polluting your system
#+BEGIN_SRC emacs-lisp
  (use-package try)
#+END_SRC

** Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC
** Projectile
Projectile's really cool. Really nice project management.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :custom
    (projectile-indexing-method 'alien)
    (projectile-enable-caching t)
    (projectile-completion-system 'ivy)
    :config
    (add-to-list 'projectile-globally-ignored-directories ".venv")
    (projectile-mode t)
    (my-leader
      :infix "p"
      "" '(:ignore t :which-key "Project")
      "f" '(projectile-find-file :which-key "Find file")
      "F" '(projectile-find-file-other-window :which-key "Find file (other window)")
      "b" '(projectile-switch-to-buffer :which-key "Switch to buffer")
      "B" '(projectile-switch-to-buffer-other-window :which-key "Switch to buffer (other window)")
      "k" '(projectile-kill-buffers :which-key "Kill all project buffers")
      "p" '(projectile-switch-project :which-key "Switch to project")
      "t" '(projectile-toggle-between-implementation-and-test :which-key "Toggle between test and implementation")
      "T" '(projectile-test-project :which-key "Run project's tests")
      "a" '(projectile-add-known-project :which-key "Add bookmark to project")
      "r" '(projectile-replace :which-key "Replace in project")
      "c" '(projectile-invalidate-cache :which-key "Clear project's cache")
      "s" '(projectile-ag :which-key "Search in project")))
#+END_SRC
** Amx
#+BEGIN_SRC emacs-lisp
  (use-package amx
    :config
    (amx-mode t))
#+END_SRC

** Dumb-jump
Jump to definitions
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :custom
    (dumb-jump-use-visible-window nil)
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (setq dumb-jump-force-searcher 'rg)
    (my-leader
      :infix "d"
      "" '(:ignore t :which-key "Definition")
      "j" '(dumb-jump-go :which-key "Jump to definition")
      "o" '(dumb-jump-go-other-window :which-key "Jump to definition on the other window")
      "l" '(dumb-jump-quick-look :which-key "Look at definition on tooltip")
      "b" '(dumb-jump-back :which-key "Jump back to previous-to-jump position")))
#+END_SRC

** Helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC
** Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config (global-undo-tree-mode t))
#+END_SRC
* Editing
** Evil
Embrace the anarchy. I love vim's modal editing. I hate vim as an editor
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :requires undo-tree
    :custom
    (evil-undo-system 'undo-tree)
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (general-define-key
     :states 'motion
     "gd" 'xref-find-definitions
     "gD" 'xref-find-references))
#+END_SRC
*** Evil collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC
*** Evil snipe
#+BEGIN_SRC emacs-lisp
  (use-package evil-snipe
    :custom
    (evil-snipe-smart-case t)
    (evil-snipe-auto-scroll t)
    :init
    (evil-snipe-mode t)
    (evil-snipe-override-mode t)
    ;; Evil-snipe conflicts with Magit
    (add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode))
#+END_SRC
*** Evil args
#+BEGIN_SRC emacs-lisp
  (use-package evil-args
    :config
    ;; bind evil-args text objects
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

    ;; bind evil-forward/backward-args
    (define-key evil-normal-state-map "L" 'evil-forward-arg)
    (define-key evil-normal-state-map "H" 'evil-backward-arg)
    (define-key evil-motion-state-map "L" 'evil-forward-arg)
    (define-key evil-motion-state-map "H" 'evil-backward-arg))
#+END_SRC
*** Evil commentary
Allows to comment word-objects
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :init
    (evil-commentary-mode t))

#+END_SRC
*** Evil surround
Allows to modify surroundings of word-objects
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :init
    (global-evil-surround-mode t))
#+END_SRC
*** Evil exchange
Allows for text objects exchanging
#+BEGIN_SRC emacs-lisp
  (use-package evil-exchange
    :config
    (evil-exchange-install))
#+END_SRC
*** Evil escape
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :config
    (setq-default evil-escape-key-sequence "jk")
    (evil-escape-mode t))
#+END_SRC
*** Evil indent
#+BEGIN_SRC emacs-lisp
  (use-package evil-indent-plus
    :config
    (evil-indent-plus-default-bindings))
#+END_SRC
*** Evil numbers
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :config
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt)
    (define-key evil-visual-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-visual-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))
#+END_SRC
** Electric parenthesis
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC
** Remove whitespace
This removes whitespace prior to saving
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Flycheck
Syntax checker and linter on the fly
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))

#+END_SRC
* Completion
** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook ((python-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :custom
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-enable-symbol-highlighting t)
    (lsp-lens-enable t)
    (lsp-eldoc-enable-hover t)
    (lsp-modeline-diagnostics-enable t)
    (lsp-diagnostics-provider 'flycheck)
    :commands lsp)

  (use-package lsp-ui
    :custom
    (lsp-ui-sideline-enable t))

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC
** Company
My choice for auto-completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay 0.0)
    (company-minimum-prefix-length 1)
    (company-show-numbers t)
    (company--dabbrev-code-everywhere t)
    (company-dabbrev-downcase nil)
    (company-dabbrev-ignore-case t)
    (company-tooltip-align-annotations t)
    (company-frontends
     '(company-tng-frontend
       company-pseudo-tooltip-frontend
       company-echo-metadata-frontend))
    (global-company-mode t)
    :config
    (company-tng-configure-default))
#+END_SRC
** Company box
#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+END_SRC
* UI
** Doom-theme
I like how Doom looks, but it's way too convoluted for my
taste, so I just grab their theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-one t)
    (doom-themes-org-config))
#+END_SRC

** All the icons
We take advantage of running Emacs as a GUI, and get nice icons for it
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC
** Doom-modeline
Nice replacement for default mode line
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :defer t
    :custom
    (doom-modeline-buffer-file-name-style 'truncate-with-project)
    :config
    (set-face-attribute 'doom-modeline-evil-normal-state nil :foreground "skyblue2")
    (set-face-attribute 'doom-modeline-evil-insert-state nil :foreground "green"))
#+END_SRC

** Cursor colors
Adds visual aid to the modeline to know which mode I'm in
#+BEGIN_SRC emacs-lisp
  (setq evil-emacs-state-cursor '("red" bar))
  (setq evil-normal-state-cursor '("skyblue2" box))
  (setq evil-visual-state-cursor '("gray" box))
  (setq evil-insert-state-cursor '("green" bar))
  (setq evil-replace-state-cursor '("red" hollow))
  (setq evil-operator-state-cursor '("red" hollow))
#+END_SRC

** Rainbow-delimiters
Visual aid to know which parenthesis is paired to which
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Show-paren
Highlight matching parenthesis on selection
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
** Indent guides
Visual aid for indentation
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :config
    (setq highlight-indent-guides-responsive 'top)
    (setq highlight-indent-guides-method 'character)
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+END_SRC

** Line highlight
Highlights current line to aid with quick cursor finding
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Pretty symbols
In emacs 24.4 we got prettify-symbols-mode which replaces things like
lambda with Î». This can help make the code easier to read. The
inhibit-compacting-font-caches stops garbage collect from trying to
handle font caches which makes things a lot faster and saves us ram.
#+BEGIN_SRC emacs-lisp
  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (setq inhibit-compacting-font-caches t)
#+END_SRC
*** Global
These symbols are the basics I like enabled for all ~prog-mode~ modes.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda ()
              (push '("!=" . ?â ) prettify-symbols-alist)
              (push '("<=" . ?â¤) prettify-symbols-alist)
              (push '(">=" . ?â¥) prettify-symbols-alist)
              (push '("=>" . ?â) prettify-symbols-alist)))
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
            (lambda ()
              (push '("def"    . ?Æ) prettify-symbols-alist)
              (push '("sum"    . ?Î£) prettify-symbols-alist)
              (push '("**2"    . ?Â²) prettify-symbols-alist)
              (push '("**3"    . ?Â³) prettify-symbols-alist)
              (push '("None"   . ?â) prettify-symbols-alist)
              (push '("in"     . ?â) prettify-symbols-alist)
              (push '("not in" . ?â) prettify-symbols-alist)
              (push '("return" . ?â¡) prettify-symbols-alist)
              (prettify-symbols-mode t)))
#+END_SRC
** Nyan mode
#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :config
    (nyan-mode)
    (nyan-start-animation))
#+END_SRC
** Visual fill column
#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :defer t
    :custom
    (visual-fill-column-width 110)
    (visual-fill-column-center-text t))
#+END_SRC
* Org
** Basic config
#+BEGIN_SRC emacs-lisp
  (defun aropie/org-mode-setup ()
    (org-indent-mode t)
    (visual-line-mode t)
    (visual-fill-column-mode t)
    (setq evil-auto-indent nil))

  (use-package org
    :defer t
    :hook (org-mode . aropie/org-mode-setup)
    :custom
    (org-src-window-setup 'current-window)
    (org-log-done t)
    (org-enforce-todo-dependencies t)
    (org-hide-emphasis-markers t)
    (org-ellipsis " â¾")
    (org-src-fontify-natively t)
    (org-fontify-quote-and-verse-blocks t)
    (org-src-tab-acts-natively t)
    (org-src-preserve-indentation nil)
    (org-startup-folded 'content)
    (org-cycle-separator-lines 2))
#+END_SRC
** Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Org"))
#+END_SRC
** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** Org-pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :defer t
    :config
    (setq org-pomodoro-ticking-sound-p t)
    (setq org-pomodoro-ticking-sound-states '(:pomodoro)))
#+END_SRC
** Org-capture
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-default-notes-file "~/Org/refile.org")
#+END_SRC
** Refile
#+BEGIN_SRC emacs-lisp
                                          ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
                                          ; Use full outline paths for refile targets - we file directly with IDO
  (setq org-refile-use-outline-path t)

                                          ; Targets complete directly with IDO
  (setq org-outline-path-complete-in-steps nil)

                                          ; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC
* Git
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix "g"
    "" '(:ignore t :which-key "Git")
    "g" '(magit-status :which-key "Status")
    "m" '(magit-dispatch-popup :which-key "Menu")
    "c" '(magit-clone :which-key "Clone")
    "b" '(magit-branch :which-key "Branch")
    "B" '(magit-blame :which-key "Blame")
    "l" '(magit-log :which-key "Log")
    "F" '(magit-pull :which-key "Pull")
    "t" '(git-timemachine :which-key "Travel through time"))
#+END_SRC
** Magit
Git porcelain inside Emacs. Basically, git turned into loving hugs and
kisses
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :custom
    (transient-default-level 5)
    (magit-diff-refine-hunk t "Show granular diffs in selected hunk")
    ;; Don't display parent/related refs in commit buffers; they are rarely
    ;; helpful and only add to runtime costs.
    (magit-revision-insert-related-refs nil)
    :config)
#+END_SRC
** Timemachine
Take your code for a travel through time (that is incidentally,
highly dependant on your commits)
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :after hydra
    :config
    (defhydra hydra-timemachine (:color pink)
      "Time machine"
      ("n" git-timemachine-show-next-revision "next")
      ("p" git-timemachine-show-previous-revision "previous")
      ("c" git-timemachine-show-current-revision "current")
      ("b" git-timemachine-blame "blame")
      ("s" git-timemachine-switch-branch "switch branch")
      ("q" (kill-matching-buffers "timemachine" t t) "quit" :color blue))

    (add-hook 'git-timemachine-mode-hook
              (lambda () (hydra-timemachine/body))))
#+END_SRC
* Languages
** Python
#+BEGIN_SRC emacs-lisp
  (use-package lsp-python-ms
    :init (setq lsp-python-ms-auto-install-server t))
#+END_SRC
*** Isort
#+BEGIN_SRC emacs-lisp
  (use-package py-isort
    :hook (before-save . py-isort-before-save)
    :custom (py-isort-options '("--profile=black")))
#+END_SRC
* Packages to consider
- https://github.com/gilbertw1/better-jumper
- https://cestlaz.github.io/post/using-emacs-57-dired-narrow/
