* Startup optimizations
** Use-package
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  (use-package use-package-ensure-system-package)
  (use-package system-packages)
#+END_SRC
** Garbage collection
#+BEGIN_SRC emacs-lisp
  (use-package gcmh
    :custom
    (gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
    :init
    (gcmh-mode 1))
#+END_SRC
* General layout and config
** Keeping emacs clean
*** No littering
From [[https://github.com/emacscollective/no-littering][its Github]]: The default paths used to store configuration files and persistent data are not
consistent across Emacs packages. This isn’t just a problem with third-party packages but even with
built-in packages. This package sets out to fix this by changing the values of path variables to put
configuration files in ~no-littering-etc-directory~ and and persistent data files in
~no-littering-var-directory~. and by using descriptive file names and subdirectories when
appropriate. This is similar to a color-theme; a “path-theme” if you will.
#+BEGIN_SRC emacs-lisp
  (use-package no-littering)
#+END_SRC
*** Auto-saves
Move auto-saves to their respective path in ~no-littering~ dir
#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+END_SRC

*** Backups
Move backups to their respective path in ~no-littering~ dir
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . ,(no-littering-expand-var-file-name "backups/")))
        backup-by-copying t
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC

*** Disable custom file
I really dislike ~custom~ writing on ~init.el~ without my permission, so I disable it
altogether. Everything should be declared in ~config.org~
#+BEGIN_SRC emacs-lisp
  (setq custom-file null-device)
#+END_SRC
** Enable narrow mode
Narrow mode is disabled by default, but I like to use it from time to time
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC
** Disable menu, toolbar and scroll
They are visual clutter once you get to know the keybindings (or create your own)
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Mac fixes
*** Mac alt fix
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil)
#+END_SRC
*** Mac path fix
MacOs has problems with paths, so we need to add them manually
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (memq system-type '(darwin windows-nt))
    :config
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "GOPATH"))
#+END_SRC
** Scroll conservatively
Makes Emacs scroll more smoothly.
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Disable ring alert
I haven't actually experienced the ring alert, but people often say it's quite annoying, so better
be safe than sorry.
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Startup message
I prefer the scratch buffer to greet me when I (rarely) restart Emacs.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Transparency
I like being able to see my wallpaper, even if it's only a little bit.
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(98 98))
  (add-to-list 'default-frame-alist '(alpha 98 98))
#+END_SRC
** Disable cursors in other windows
I find it confusing having cursors on every window, so I just remove inactive ones.
#+BEGIN_SRC emacs-lisp
  (setq cursor-in-non-selected-windows nil)
#+END_SRC
** Help
When opening a help window, always and move focus to it.
#+BEGIN_SRC emacs-lisp
  (setq help-window-select t)
#+END_SRC
** Font
This is supposed to adjust font sizes depending on which screen I'm working on, but I have yet to
find a sweet spot for it.
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
      (set-face-attribute 'default nil :height 120)
    (set-face-attribute 'default nil :height 100))
#+END_SRC
** Yes-or-no
Change =yes or no= prompts to =y or n=.
#+BEGIN_SRC emacs-lisp
  ;; Emacs 28 has a variable for using short answers, which should
  ;; be preferred if using that version or higher.
  (if (boundp 'use-short-answers)
      (setq use-short-answers t)
    (advice-add 'yes-or-no-p :override #'y-or-n-p))
#+END_SRC
** Auto revert everything
Since I run a lot of automatic linting, I like for all buffers to match the actual file as closely
as possible.
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
  (setq global-auto-revert-non-file-buffers t)
#+END_SRC
** Correctly set exec-path
#+BEGIN_SRC emacs-lisp
  (defun set-exec-path-from-shell-PATH ()
    "Set up Emacs' `exec-path' and PATH environment variable to match
  that used by the user's shell.

  This is particularly useful under Mac OS X and macOS, where GUI
  apps are not started from a shell."
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$" "" (shell-command-to-string
                                            "$SHELL --login -c 'echo $PATH'"
                                            ))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (set-exec-path-from-shell-PATH)
#+END_SRC
** Increase kill ring size
#+BEGIN_SRC emacs-lisp
  (setq kill-ring-max 1200)
#+END_SRC
** Start frame fullsize
#+BEGIN_SRC emacs-lisp
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC
* Utils
** Hydra
I use hydra to have some persistent menus and bindings.
#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC
** General.el
Manage all the keybindings through ~general~ and ~hydra~ à la ~spacemacs~.
#+BEGIN_SRC emacs-lisp
  (setq aropie/file-prefix "f"
  	  aropie/buffer-prefix "b"
  	  aropie/toggle-prefix "t"
  	  aropie/open-prefix "o"
  	  aropie/help-prefix "h"
  	  aropie/config-prefix "oC")
  (use-package general
    :config
    (general-create-definer my-leader
  	;; :prefix my-leader
  	:states '(normal insert emacs)
  	:keymaps 'override
  	:prefix "SPC"
  	:non-normal-prefix "M-SPC")
    (general-create-definer my-local-leader
  	;; prefix local-leader
  	:states '(normal insert emacs)
  	:prefix "SPC m"
  	:non-normal-prefix "M-SPC m")
    (general-auto-unbind-keys))
  (my-leader
    aropie/file-prefix'(:ignore t :which-key "File")
    aropie/buffer-prefix '(:ignore t :which-key "Buffer")
    aropie/toggle-prefix '(:ignore t :which-key "Toggle")
    aropie/open-prefix '(:ignore t :which-key "Open")
    aropie/help-prefix '(:ignore t :which-key "Help")
    aropie/config-prefix '(:ignore t :which-key "Config"))
#+END_SRC
** Main keybindings
*** File keybindings
#+BEGIN_SRC emacs-lisp
  ;; Taken from https://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/
  (defun aropie/rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))

  (my-leader
    :infix aropie/file-prefix
    "f" '("Find file" . find-file)
    "s" '("Save file" . save-buffer)
    "r" '("Rename/move this file)" . aropie/rename-file-and-buffer)
    "u" '("Sudo find file (TBD)" t . :ignore)
    "U" '("Sudo this file (TBD)" t . :ignore))
  (my-leader
    "SPC" '("Find file in project" . projectile-find-file)
    "." '("Find file" . find-file)
    "," '("Switch to buffer" . switch-to-buffer))
#+END_SRC
*** Buffer keybindings
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix aropie/buffer-prefix
    "b" '("Switch to workspace buffer" . consult-buffer)
    "i" '("Clone buffer as indirect buffer" . clone-indirect-buffer)
    "k" '("Kill this buffer" . kill-this-buffer)
    "r" '("Revert buffer" . revert-buffer)
    "n" '("Next buffer" . next-buffer)
    "p" '("Previous buffer" . previous-buffer)
    "e" '("Set buffer coding system" . set-buffer-file-coding-system))
  (my-leader
    "," '("Switch to workspace buffer" . consult-buffer))
#+END_SRC
*** Toggle keybindings
#+BEGIN_SRC emacs-lisp
  (my-leader
	:infix aropie/toggle-prefix
	"l" '("Line numbers" . global-display-line-numbers-mode)
	"r" '("Read only mode" . read-only-mode)
	"w" '("Whitespace mode" . whitespace-mode)
	"v" '("Visual line mode" . visual-line-mode)
	"t" '("Truncate lines" . toggle-truncate-lines))
#+END_SRC
*** Open keybindings
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix aropie/open-prefix
    "c" '("Calc" . calc)
    "s" '("Scratch" . scratch-buffer))

#+END_SRC
*** Help keybindings
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix aropie/help-prefix
    "a" '("Apropos" . apropos-command)
    "k" '("Key" . describe-key)
    "f" '("Function" . describe-function)
    "m" '("Mode" . describe-mode)
    "b" '("Bindings" . describe-bindings)
    "B" '("Personal bindings" . general-describe-keybindings)
    "v" '("Variable" . describe-variable))
#+END_SRC
*** Config shortcuts
I tend to modify a lot my config files, so I set shortcuts to the most used ones.
#+BEGIN_SRC emacs-lisp
  (defun aropie/emacs-config-visit ()
    (interactive)
    (find-file (expand-file-name "config.org" user-emacs-directory)))
  (defun aropie/zsh-config-visit ()
    (interactive)
    (find-file (expand-file-name ".zshrc" (let ((dir (substitute-env-vars "$ZDOTDIR")))
  										  (if (eq dir "")
  											  (substitute-env-vars "$HOME")
  											dir)))))
  (defun aropie/emacs-config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "config.org" user-emacs-directory)))

  (my-leader
    :infix aropie/config-prefix
    "e" '("emacs" . aropie/emacs-config-visit)
    "z" '("zsh" . aropie/zsh-config-visit)
    "r" '("Reload emacs config" . aropie/emacs-config-reload))
#+END_SRC
** Which-key
Because Emacs is hard enough without visual aids.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :custom
    (setq which-key-idle-delay 1))
#+END_SRC
** Rg
Ripgrep.
#+BEGIN_SRC emacs-lisp
  (use-package rg
    :ensure-system-package (rg . ripgrep))
#+END_SRC
** Vertico
From [[https://github.com/minad/vertico][its Github]]: Vertico provides a performant and minimalistic vertical completion UI based on the
default completion system. The focus of Vertico is to provide a UI which behaves correctly under all
circumstances. By reusing the built-in facilities system, Vertico achieves full compatibility with
built-in Emacs completion commands and completion tables.
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :custom
    (enable-recursive-minibuffers t)
    (vertico-cycle t)
    :config
    (general-define-key
     :keymaps 'vertico-map
     "C-S-J" 'vertico-next-group
     "C-S-K" 'vertico-previous-group
     "C-j" 'vertico-next
     "C-k" 'vertico-previous)
    (vertico-mode))
#+END_SRC
** Marginalia
Adds annotations at the margin for minivuffer completions.
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :after vertico
    :general (:keymaps 'minibuffer-local-map
              "M-A" 'marginalia-cycle)
    :init
    (marginalia-mode t))
#+END_SRC
** Orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC
** Consult
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :after (evil)
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    (general-define-key
     "C-s" 'consult-line
     :keymap minibuffer-local-map
     "C-r" 'consult-history)
    (evil-add-command-properties #'consult-buffer :jump t)
    :config

    (my-leader
      :infix aropie/toggle-prefix
      "m" '("Toggle minor mode (i/o/l/g SPC)" . consult-minor-mode-menu)
      "M" '("Toggle major mode (l/g/m SPC)" . consult-mode-command))
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref))
#+END_SRC
** Embark
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings))) ;; alternative for `describe-bindings'
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC
** Presentation mode
A mode to enbiggen font for presentations and screen sharing.
#+BEGIN_SRC emacs-lisp
  (use-package presentation
    :config
    (defun aropie/presentation-on ()
      (lsp-ui-mode -1))
    (defun aropie/presentation-off ()
      (lsp-ui-mode 1))

    (add-hook 'presentation-on-hook #'aropie/presentation-on)
    (add-hook 'presentation-off-hook #'aropie/presentation-off)

    (my-leader
      :infix aropie/toggle-prefix
      "p" '("Presentation mode" . presentation-mode)))
#+END_SRC
** Projectile
Projectile's really cool. Very nice project management.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :custom
    (projectile-indexing-method 'alien)
    (projectile-completion-system 'auto)
    (projectile-enable-caching t)
    :config
    (add-to-list 'projectile-globally-ignored-directories ".venv")
    (projectile-mode t)
    (my-leader
      :infix "p"
      "" '(:ignore t :which-key "Project")
  	"p" '("Switch project" . projectile-switch-project)
      "f" '("Find file" . projectile-find-file)
      "F" '("Find file (other window)" . projectile-find-file-other-window)
      "b" '("Switch to buffer" . projectile-switch-to-buffer)
      "B" '("Switch to buffer (other window)" . projectile-switch-to-buffer-other-window)
      "k" '("Kill all project buffers" . projectile-kill-buffers)
      "t" '("Toggle between test and implementation" . projectile-toggle-between-implementation-and-test)
      "T" '("Run project's tests" . projectile-test-project)
      "a" '("Add bookmark to project" . projectile-add-known-project)
      "r" '("Replace in project" . projectile-replace)
      "c" '("Clear project's cache" . projectile-invalidate-cache)
      "s" '("Search in project" . consult-ripgrep)))
#+END_SRC
** Dumb-jump
Jumping to definitions made simple
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :custom
    (dumb-jump-use-visible-window nil)
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (setq dumb-jump-force-searcher 'rg)
    (my-leader
      :infix "d"
      "" '(:ignore t :which-key "Definition")
      "j" '("Jump to definition" . dumb-jump-go)
      "o" '("Jump to definition on the other window" . dumb-jump-go-other-window)
      "l" '("Look at definition on tooltip" . dumb-jump-quick-look)
      "b" '("Jump back to previous-to-jump position" . dumb-jump-back)))
#+END_SRC

** Helpful
Improves ~help~ buffers adding contextual information and multiple references.
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC
** Undo tree
Undoing becomes actually a branching tree, one that I can actually navigate. This is some serious
voodoo stuff.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :custom (undo-tree-auto-save-history nil)
    :config
    (global-undo-tree-mode t)
    (my-leader
  	:infix aropie/open-prefix
  	"u" '("Undo tree" . undo-tree-visualize)))
#+END_SRC
** Avy
Jump around like there's no tomorrow.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :custom
    (avy-background t)
    (avy-all-windows t)
    :config
    (defun aropie/avy-jump-to-char-in-one-window()
      (interactive)
      (setq current-prefix-arg '(4)) ; C-u
      (call-interactively 'avy-goto-char-2))


  (defun avy-goto-definition (pt)
    (save-excursion
  	(goto-char pt)
  	(evil-goto-definition))
    t)

  (setf (alist-get ?D avy-dispatch-alist) 'avy-goto-definition)

    (general-define-key
     :keymaps 'override
     "C-;" 'avy-goto-char-timer)

    (my-leader
      :infix "j"
      "" '(:ignore t :which-key "Jump")
      "w" '("Jump to word" . avy-goto-subword-1)
      "l" '("Jump to line" . avy-goto-line)
      "c" '("Jump to char" . avy-goto-char)
      "m" '(:ignore t :which-key "Move...")
      "ml" '("Move line" . avy-move-line)
      "mr" '("Move region" . avy-move-region)
      "y" '(:ignore t :which-key "Yank...")
      "yl" '("Yank line" . avy-copy-line)
      "yr" '("Yank region" . avy-copy-region)
      "k" '(:ignore t :which-key "Kill...")
      "kr" '("Kill region between lines" . avy-kill-region)
      "kl" '("Kill line" . avy-kill-whole-line)))
#+END_SRC
** Ace window
Window managing made smart.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    :config
    (global-set-key (kbd "M-o") 'other-window)
    (winner-mode t)
    (general-define-key
     :states '(normal insert emacs)
     :keymaps 'override
     "C-w C-w" 'ace-window)

    (my-leader
      :infix "w"
      "" '(:ignore t :which-key "Windows")
      "w" '("Change window" . ace-window)
      "u" '("Undo windows config" . winner-undo)
      "s" '("Swap windows" . ace-swap-window)
      "o" '("Delete other windows" . delete-other-windows)
      "x" '("Delete window" . ace-delete-window)
      "h" '("Split window horizontally" . split-window-vertically)
      "v" '("Split window vertically" . split-window-horizontally)
      "r" '("Resize windows" . hydra-window-resize/body)))
#+END_SRC
** Verb
Like [[https://github.com/pashky/restclient.el][restclient.el]], but +better+ with ~org-mode.~
#+BEGIN_SRC emacs-lisp
  (use-package verb
    :config
    (push '("application/x-amz-json-1.1" verb-handler-json) verb-content-type-handlers)
    (my-local-leader
  	:keymaps 'verb-mode-map
  	:state 'normal
  	"m" 'verb-send-request-on-point
  	"vv" 'verb-set-var))
#+END_SRC
*** Set local variables to safe
For the custom template I'm using for verb files, I set some variables to ~safe~ in order to avoid
prompts everytime I open one of those files.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'safe-local-variable-values '(flyspell-mode))
  (add-to-list 'safe-local-variable-values '(org-fontify-emphasized-text))
#+END_SRC
** Persistent scratch
#+BEGIN_SRC emacs-lisp
  (use-package persistent-scratch
    :init
    (persistent-scratch-setup-default)
    :config
    (add-hook 'kill-emacs-hook 'persistent-scratch-save))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :straight nil
    :custom
    (dired-listing-switches "-Agho --group-directories-first")
    (dired-recursive-copies 'always)
    (dired-recursive-deletes 'always)
    (dired-dwim-target t)
    (dired-omit-files "^\\.[^.].*")
    (dired-use-ls-dired 'unspecified)
    :hook ((dired-mode . dired-omit-mode)
           (dired-mode . dired-hide-details-mode))
    :general (my-leader
    	:infix aropie/toggle-prefix
    	:states '(normal visual motion)
    	:keymaps 'dired-mode-map
    	"h" '("Toggle hidden files" . dired-omit-mode)
    	"a" '("Toggle full details" . dired-hide-details-mode))
    :init
    (when (eq system-type 'darwin)
  	(setq insert-directory-program "/opt/homebrew/bin/gls"))

    :config

    ;; Open dired folders in same buffer
    (put 'dired-find-alternate-file 'disabled nil)

    (general-define-key
     :states 'normal
     :keymaps 'dired-mode-map
     "h" 'dired-up-directory
     "l" 'dired-find-alternate-file)


    (my-leader
      :infix aropie/open-prefix
      "d" '("Dired" . dired-jump)))
#+END_SRC
*** Dired narrow
#+BEGIN_SRC emacs-lisp
  (use-package dired-narrow
    :bind (:map dired-mode-map
                ("/" . dired-narrow)))
#+END_SRC
*** Dired colorizing
#+BEGIN_SRC emacs-lisp
  (use-package diredfl
    :hook (dired-mode . diredfl-mode))
#+END_SRC
*** All the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
*** Rainbow
#+BEGIN_SRC emacs-lisp
  (use-package dired-rainbow
    :config
    (progn
      (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
      (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
      (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
      (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
      (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
      (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
      (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
      (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
      (dired-rainbow-define log "#c17d11" ("log"))
      (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
      (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
      (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
      (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
      (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
      (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
      (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
      (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
      (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
      (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
      (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
      ))
#+END_SRC
*** Collapse
#+BEGIN_SRC emacs-lisp
  (use-package dired-collapse
    :hook (dired-mode . dired-collapse-mode))
#+END_SRC
** Make shebang (#!) files executable on save
#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+END_SRC
** PDF Tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install))
#+END_SRC
*** PDF restore view
#+BEGIN_SRC emacs-lisp
  (use-package pdf-view-restore
    :after pdf-tools
    :config
    (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))
#+END_SRC
** Debugging
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :config
    (dap-ui-mode 1))
#+END_SRC
** Ediff
#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC
** Vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :custom (vterm-max-scrollback 100000))
#+END_SRC
*** Multi-Vterm
#+BEGIN_SRC emacs-lisp
  (use-package multi-vterm
    :after consult
    :hook (vterm-mode . evil-insert-state)
    :general ("C-<return>" 'aropie/dwim-toggle-dedicated-vterm)
    :init
    (defun aropie/dwim-toggle-dedicated-vterm ()
  	"DWIM when toggling the dedicated vterm buffer.

  If dedicated vterm is not visible, open it and switch focus to it.
  If it's visible but not selected, select it.
  If it's visible and selected, close it."
  	(interactive)
  	(let ((vterm-buffer-window (if (boundp 'multi-vterm-dedicated-buffer)
  								   (get-buffer-window multi-vterm-dedicated-buffer))))
  	  (if vterm-buffer-window
  		  (if (eq (current-buffer) multi-vterm-dedicated-buffer)
  			  (multi-vterm-dedicated-close)
  			(select-window vterm-buffer-window))
  		(multi-vterm-dedicated-open))))
    :config
    ;;  Filter by default the dedicated vterm from consult buffer list
    (push "\\*vterminal - dedicated\\*" consult-buffer-filter))
#+END_SRC
** Popwin
#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :config
    (popwin-mode 1))
#+END_SRC
** GPT
Add an LLM client within Emacs
#+BEGIN_SRC emacs-lisp
  (use-package gptel
    :config
    (my-leader
  	:infix aropie/open-prefix
  	"g" '("GPT" . gptel-menu)))
#+END_SRC
** Pulsar
#+BEGIN_SRC emacs-lisp
  (use-package pulsar
    :config
    (pulsar-global-mode t))

#+END_SRC
* Editing
** Indentation
*** Tabs
**** Use tabs (almost) always
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode t)
#+END_SRC
**** Set default tab size
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC
** Line numbers
Use relative line numbers, but only for programming languages
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'visual)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC
** Evil
Embrace the anarchy. I love vim's modal editing. I hate vim as an editor
#+BEGIN_QUOTE
Evil will always triumph, because good is dumb.
Spaceballs (1987)
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :requires undo-tree
    :custom
    (evil-undo-system 'undo-tree)
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-respect-visual-line-mode t)
    (setq-default evil-shift-width tab-width)
    :config
    ;; Push xref to the front of goto-defintion functions so it always have priority
    (push 'evil-goto-definition-xref evil-goto-definition-functions)
    (evil-mode 1))
#+END_SRC
*** Evil collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :custom (evil-collection-outline-bind-tab-p t)
    :config
    (evil-collection-init))
#+END_SRC
*** Evil snipe
#+BEGIN_SRC emacs-lisp
  (use-package evil-snipe
    :custom
    (evil-snipe-smart-case t)
    (evil-snipe-auto-scroll t)
    :init
    (evil-snipe-mode t)
    (evil-snipe-override-mode t)
    ;; Evil-snipe conflicts with Magit
    (add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode))
#+END_SRC
*** Evil args
#+BEGIN_SRC emacs-lisp
  (use-package evil-args
    :config
    ;; bind evil-args text objects
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

    ;; bind evil-forward/backward-args
    (define-key evil-normal-state-map "L" 'evil-forward-arg)
    (define-key evil-normal-state-map "H" 'evil-backward-arg)
    (define-key evil-motion-state-map "L" 'evil-forward-arg)
    (define-key evil-motion-state-map "H" 'evil-backward-arg))
#+END_SRC
*** Evil commentary
Allows to comment word-objects
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :init
    (evil-commentary-mode t))

#+END_SRC
*** Evil surround
Allows to modify surroundings of word-objects
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :init
    (global-evil-surround-mode t))
#+END_SRC
*** Evil exchange
Allows for text objects exchanging
#+BEGIN_SRC emacs-lisp
  (use-package evil-exchange
    :config
    (evil-exchange-install))
#+END_SRC
*** Evil escape
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :config
    (setq-default evil-escape-key-sequence "jk")
    (evil-escape-mode t))
#+END_SRC
*** Evil indent
#+BEGIN_SRC emacs-lisp
  (use-package evil-indent-plus
    :config
    (evil-indent-plus-default-bindings))
#+END_SRC
*** Evil numbers
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :config
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt)
    (define-key evil-visual-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-visual-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))
#+END_SRC
*** Evil multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package evil-mc
  	:hook ((prog-mode text-mode) . evil-mc-mode)
  	:config
      ;; Prevent evil-mc from deleting named registers
      ;; See https://github.com/gabesoft/evil-mc/issues/83
      (setq evil-mc-cursor-variables
    		(mapcar
    		 (lambda (s)
    		   (remove 'register-alist
    				   (remove 'evil-markers-alist
    						   (remove evil-was-yanked-without-register s))))
    		 evil-mc-cursor-variables))

  	(defhydra hydra-mc (:color red)
  	  "Multiple cursors"
  	  ("n" evil-mc-make-and-goto-next-match "Create and next match")
  	  ("p" evil-mc-make-and-goto-prev-match "Create and previous match")
  	  ("N" evil-mc-skip-and-goto-next-match "Skip to next match")
  	  ("P" evil-mc-skip-and-goto-prev-match "Skip to previous match")
  	  ("m" evil-mc-make-all-cursors "Create all cursors")
  	  ("j" evil-mc-make-cursor-move-next-line "Create and next line")
  	  ("k" evil-mc-make-cursor-move-prev-line "Create and previous line")
  	  ("q" evil-mc-undo-all-cursors "Undo all cursors" :color blue))
  	(general-define-key
  	 :states '(normal visual)
  	 :keymaps 'override
  	 "gr" 'hydra-mc/body))
#+END_SRC
*** Evil Owl
#+BEGIN_SRC emacs-lisp
  (use-package evil-owl
    :custom (evil-owl-max-string-length 500)
    :config
    (add-to-list 'display-buffer-alist
                 '("*evil-owl*"
                   (display-buffer-in-side-window)
                   (side . bottom)
                   (window-height . 0.3)))
    (evil-owl-mode))
#+END_SRC
** Electric parenthesis
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
  (setq electric-pair-skip-whitespace nil)
#+END_SRC
** Remove whitespace prior to saving
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Flycheck
Syntax checker and linter on the fly
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))

#+END_SRC
** Tree sitter
#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs
    :init (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
    :config
    (global-tree-sitter-mode))
#+END_SRC
** Code Folding
#+BEGIN_SRC emacs-lisp
  (use-package hideshow
    :hook (prog-mode . hs-minor-mode))
#+END_SRC
** Better jumper
#+BEGIN_SRC emacs-lisp
  (use-package better-jumper
    :hook (better-jumper-post-jump . recenter)
    :custom (better-jumper-add-jump-behavior 'replace)
    :init
    ;; Pulse the cursor after jumping
    (add-to-list 'pulsar-pulse-functions 'better-jumper-jump-forward)
    (add-to-list 'pulsar-pulse-functions 'better-jumper-jump-backward)
    :general (:states '(normal motion)
  					"C-o" 'better-jumper-jump-backward
  					"C-i" 'better-jumper-jump-forward)
    :config
    (better-jumper-mode))
#+END_SRC
** Apheleia
#+BEGIN_SRC emacs-lisp
  (use-package apheleia
    :config
    (apheleia-global-mode t))
#+END_SRC
** Auto-fill-mode
Enable ~auto-fill-mode~ for code comments. Also, by default ~fill-column~ is set to 70, which is way too low,
so we increase it a little bit. This value will be used for auto-filling code comments and also by
~org-mode~.
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 100)
  (add-hook 'prog-mode-hook
  		  (lambda () (progn
  					   (auto-fill-mode t)
  					   (set (make-local-variable 'comment-auto-fill-only-comments) t))))
#+END_SRC
** Parrot
#+BEGIN_SRC emacs-lisp
  (use-package parrot
    :config
    (parrot-mode)
    (define-key evil-normal-state-map (kbd "[r") 'parrot-rotate-prev-word-at-point)
    (define-key evil-normal-state-map (kbd "]r") 'parrot-rotate-next-word-at-point))
#+END_SRC
* Completion
** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook (lsp-mode . lsp-enable-which-key-integration)
    :custom
    (lsp-headerline-breadcrumb-segments '(project file symbols))
    (lsp-headerline-breadcrumb-enable t)
    (lsp-enable-symbol-highlighting t)
    (lsp-lens-enable t)
    (lsp-eldoc-enable-hover t)
    (lsp-modeline-diagnostics-enable t)
    (lsp-diagnostics-provider 'flycheck)
    (lsp-signature-render-documentation nil)
    (lsp-log-io nil)
    (lsp-use-plists t)
    :commands lsp
    :config
    (general-define-key
     :states 'normal
     "gD" 'lsp-find-references)
    (my-leader
  	:infix "c"
  	"" '(:ignore t :which-key "Code")
  	"d" '("Debug session" . dap-hydra)
  	"r" '("Rename symbol" . lsp-rename)))

  (use-package lsp-ui
    :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-position 'at-point)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-sideline-enable t)
    :hook (lsp-mode . lsp-ui-doc-mode)
    :config
    (my-leader
      :infix "c"
      "i" '("imenu" . lsp-ui-imenu))
    (my-leader
  	:infix aropie/toggle-prefix
  	"b" '("Breadcrumb" . lsp-headerline-breadcrumb-mode))
    (general-define-key
     :keymaps '(override lsp-ui-mode-map)
     :states 'normal
     "K" 'lsp-ui-doc-glance
     "<backtab>" 'lsp-ui-doc-focus-frame)
    (general-define-key
     :states 'normal
     :keymaps 'lsp-ui-doc-frame-mode-map
     "q" 'lsp-ui-doc-hide))
#+END_SRC
*** LSP booster
#+BEGIN_SRC emacs-lisp
  (defun lsp-booster--advice-json-parse (old-fn &rest args)
    "Try to parse bytecode instead of json."
    (or
     (when (equal (following-char) ?#)
  	 (let ((bytecode (read (current-buffer))))
  	   (when (byte-code-function-p bytecode)
  		 (funcall bytecode))))
     (apply old-fn args)))
  (advice-add (if (progn (require 'json)
  					   (fboundp 'json-parse-buffer))
  				'json-parse-buffer
  			  'json-read)
  			:around
  			#'lsp-booster--advice-json-parse)

  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD."
    (let ((orig-result (funcall old-fn cmd test?)))
      (if (and (not test?)                             ;; for check lsp-server-present?
               (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
               lsp-use-plists
               (not (functionp 'json-rpc-connection))  ;; native json-rpc
               (executable-find "emacs-lsp-booster"))
          (progn
    	(when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
              (setcar orig-result command-from-exec-path))
    	(message "Using emacs-lsp-booster for %s!" orig-result)
    	(cons "emacs-lsp-booster" orig-result))
    	orig-result)))
  (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+END_SRC
** Company
My choice for auto-completion
#+BEGIN_SRC emacs-lisp
  (use-package company
	:after lsp-mode
	:hook (prog-mode . company-mode)
	:custom
	(company-begin-commands '(self-insert-command))
	(company-idle-delay 0.0)
	(company-minimum-prefix-length 1)
	(company-show-numbers t)
	(company-dabbrev-code-everywhere t)
	(company-dabbrev-code-other-buffers t)
	(company-dabbrev-downcase nil)
	(company-dabbrev-ignore-case t)
	(company-tooltip-align-annotations t)
	(company-show-quick-access t)
	:config
	(company-tng-configure-default))
#+END_SRC
*** Company box
#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :requires company
    :hook (company-mode . company-box-mode))
#+END_SRC
*** Company Quickhelp
#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :hook (company-mode . company-quickhelp-mode))
#+END_SRC
** YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :custom (yas-snippet-dirs `(,(concat user-emacs-directory "templates")))
    :hook (yas-before-expand-snippet . evil-insert-state)
    :init
    (yas-global-mode 1))
#+END_SRC
** File templates
Idea taken from [[http://howardism.org/Technical/Emacs/templates-tutorial.html][here]]
#+BEGIN_SRC emacs-lisp
  (use-package autoinsert
    :custom
    (auto-insert-query nil)
    (auto-insert-directory (concat user-emacs-directory "templates"))
    :hook (find-file . auto-insert)
    :config
    (defun autoinsert-yas-expand()
      "Replace text in yasnippet template."
      (yas-expand-snippet (buffer-string) (point-min) (point-max)))
    (define-auto-insert "\\.py?$" ["default-py.py" autoinsert-yas-expand])
    (define-auto-insert "\\endpoints.org?$" ["default-endpoints.org" autoinsert-yas-expand])
    (define-auto-insert "\\.uml$" ["default-uml.uml" autoinsert-yas-expand])
    (auto-insert-mode t))
#+END_SRC
* UI
** Doom-theme
I like how Doom looks, but it's way too convoluted for my taste, so I just grab their theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-one t)
    (doom-themes-org-config))
#+END_SRC
** Solaire
=Solaire-mode= is an aesthetic plugin designed to visually distinguish "real" buffers (i.e. file-visiting code buffers where you do most of your work) from "unreal" buffers (like popups, sidebars, log buffers, terminals, etc) by giving the latter a slightly different -- often darker -- background
#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :config
    (solaire-global-mode 1))
#+END_SRC
** All the icons
We take advantage of running Emacs as a GUI, and get nice icons for it
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :init
    (unless (member "all-the-icons" (font-family-list))
  	(all-the-icons-install-fonts t)))
#+END_SRC
** All-the-icons-completion
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+END_SRC
** Doom-modeline
Nice replacement for default mode line
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :defer t
    :init
    (unless (member "Symbols Nerd Font Mono" (font-family-list))
  	(nerd-icons-install-fonts t))
    :custom
    (doom-modeline-buffer-file-name-style 'relative-to-project)
    :config
    (set-face-attribute 'doom-modeline-evil-normal-state nil :foreground "skyblue2")
    (set-face-attribute 'doom-modeline-evil-insert-state nil :foreground "green"))
#+END_SRC

** Cursor colors
Adds visual aid to the modeline to know which mode I'm in
#+BEGIN_SRC emacs-lisp
  (setq evil-emacs-state-cursor '("red" bar))
  (setq evil-normal-state-cursor '("skyblue2" box))
  (setq evil-visual-state-cursor '("gray" box))
  (setq evil-insert-state-cursor '("green" bar))
  (setq evil-replace-state-cursor '("red" hollow))
  (setq evil-operator-state-cursor '("red" hollow))
#+END_SRC

** Rainbow-delimiters
Visual aid to know which parenthesis is paired to which
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Show-paren
Highlight matching parenthesis on selection
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
** Indent guides
Visual aid for indentation
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :custom
    (highlight-indent-guides-responsive 'top)
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-auto-character-face-perc 30)
    (highlight-indent-guides-auto-top-character-face-perc 80)
    :hook
    (prog-mode . highlight-indent-guides-mode))
#+END_SRC

** Line highlight
Highlights current line to aid with quick cursor finding
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Pretty symbols
In emacs 24.4 we got prettify-symbols-mode which replaces things like lambda with λ. This can help make the code easier to read. The inhibit-compacting-font-caches stops garbage collect from trying to handle font caches which makes things a lot faster and saves us ram.
#+BEGIN_SRC emacs-lisp
  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (setq inhibit-compacting-font-caches t)
#+END_SRC
These symbols are the basics I like enabled for all ~prog-mode~ modes.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda ()
              (push '("!=" . ?≠) prettify-symbols-alist)
              (push '("<=" . ?≤) prettify-symbols-alist)
              (push '(">=" . ?≥) prettify-symbols-alist)
              (push '("=>" . ?⇒) prettify-symbols-alist)))
#+END_SRC
** Nyan mode
#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :config
    (nyan-mode)
    (nyan-start-animation))
#+END_SRC
** Visual fill column
#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
	:defer t
	:custom
	(visual-fill-column-width 110)
	(visual-fill-column-center-text t)
	(visual-fill-column-enable-sensible-window-split t))
#+END_SRC
** SVG-Tags
#+BEGIN_SRC emacs-lisp
  ;; It displays badly on MacOS, so I'm disabling it until I can figure it out
  (use-package svg-tag-mode
    :if (not (eq system-type 'darwin)))
#+END_SRC
** Hide mode-line
To be used in hooks for hiding the mode-line, mainly inferior-modes (ie shells, REPLs, etc)
#+BEGIN_SRC emacs-lisp
  (use-package hide-mode-line)
#+END_SRC
* Org
** Basic config
#+BEGIN_SRC emacs-lisp
    (defun aropie/org-mode-setup ()
  	(visual-fill-column-mode t)
  	(auto-fill-mode t)
  	(setq evil-auto-indent nil))

  (use-package org
  	:defer t
  	:hook (org-mode . aropie/org-mode-setup)
  	:custom
  	(org-src-window-setup 'current-window)
  	(org-log-done 'time)
  	(org-log-into-drawer t)
  	(org-agenda-start-with-log-time t)
  	(org-enforce-todo-dependencies t)
  	(org-hide-emphasis-markers t)
  	(org-confirm-babel-evaluate nil)
  	(org-ellipsis " ▾")
  	(org-src-fontify-natively t)
  	(org-fontify-quote-and-verse-blocks t)
  	(org-src-tab-acts-natively t)
  	(org-src-preserve-indentation nil)
  	(org-startup-folded t)
  	(org-cycle-separator-lines 2)
  	(org-tags-column 0)
  	(org-pretty-entities t)
  	(org-use-sub-superscripts nil)
  	:config
  	(add-to-list 'org-structure-template-alist '("el" . "SRC emacs-lisp"))
  	(add-to-list 'org-structure-template-alist '("sh" . "SRC sh"))
  	(add-to-list 'org-structure-template-alist '("sho" . "SRC sh :results output"))
  	(add-to-list 'org-export-backends 'md)
  	(add-to-list 'org-export-backends 'beamer)

  	;; Load languages functionality into Org Babel
  	(org-babel-do-load-languages
  	 'org-babel-load-languages
  	 '((shell . t)))

  	(my-local-leader
  	  :keymaps 'org-mode-map
  	  :state 'normal
  	  "t" 'org-set-tags-command
  	  "m" 'org-insert-structure-template)

  	(general-define-key
  	 :states 'normal
  	 :keymaps 'org-mode-map
  	 "TAB" 'org-cycle
  	 "H" 'org-up-element))
#+END_SRC
** Org Roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/Notes")
    :init (setq org-roam-v2-ack t)
    :config
    (org-roam-db-autosync-mode)
    (my-leader
      :infix "o"
      "n" '("Notes" . org-roam-node-find)))
#+END_SRC
** Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Org"))
#+END_SRC
** Org bullet
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** Org-pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :defer t
    :config
    (setq org-pomodoro-ticking-sound-p t)
    (setq org-pomodoro-ticking-sound-states '(:pomodoro)))
#+END_SRC
** Org-capture
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-default-notes-file "~/Org/refile.org")
#+END_SRC
** Refile
#+BEGIN_SRC emacs-lisp
                                          ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
                                          ; Use full outline paths for refile targets - we file directly with IDO
  (setq org-refile-use-outline-path t)

                                          ; Targets complete directly with IDO
  (setq org-outline-path-complete-in-steps nil)

                                          ; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC
** Org fancy priorities
#+BEGIN_SRC emacs-lisp
  (use-package org-fancy-priorities
    :hook
    (org-mode . org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list '((?A . "❗")
                                      (?B . "⬆")
                                      (?C . "⬇")
                                      (?D . "☕")
                                      (?1 . "⚡")
                                      (?2 . "⮬")
                                      (?3 . "⮮")
                                      (?4 . "☕")
                                      (?I . "Important"))))
#+END_SRC
** SVG tags
#+BEGIN_SRC emacs-lisp
  ;; Disabling until https://github.com/rougier/svg-lib/issues/18 is resolved
  ;; because it breaks daemon mode
  ;; (add-hook 'org-mode-hook
  ;;           (lambda ()
  ;;             (setq svg-tag-tags '(
  ;;                                  ;; Org tags
  ;;                                  (":\\([A-Za-z0-9-_]+\\)" . ((lambda (tag) (svg-tag-make tag :face 'org-tag))))

  ;;                                  ;; TODO / DONE
  ;;                                  ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
  ;;                                  ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))))
  ;;             (svg-tag-mode t)))

#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp
  (my-leader
    :infix "g"
    "" '(:ignore t :which-key "Git")
    "g" '("Status" . magit-status)
    "m" '("Menu" . magit-dispatch)
    "c" '("Clone" . magit-clone)
    "b" '("Branch" . magit-branch)
    "B" '("Blame" . magit-blame)
    "L" '("Log" . magit-log)
    "F" '("Pull" . magit-pull)
    "t" '("Travel through time" . git-timemachine))
#+END_SRC
** Magit
Git porcelain inside Emacs. Git turned into loving hugs and kisses
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :custom
    (transient-default-level 5)
    (magit-diff-refine-hunk t "Show granular diffs in selected hunk")
    ;; Don't display parent/related refs in commit buffers; they are rarely
    ;; helpful and only add to runtime costs.
    (magit-revision-insert-related-refs nil)
    (magit-commit-show-diff nil)
    :hook (git-commit-mode . evil-insert-state)
    :config
    (general-def '(normal visual motion) magit-blob-mode-map
     "q" 'magit-kill-this-buffer)
    (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-assume-unchanged-files 'magit-insert-stashes))
#+END_SRC
** Timemachine
Take your code for a travel through time (that is incidentally, highly dependant on your commits)
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :straight (:host nil :repo "https://codeberg.org/pidu/git-timemachine"
               :branch "master")
    :after hydra
    :config
    (defhydra hydra-timemachine (:color pink)
      "Time machine"
      ("n" git-timemachine-show-next-revision "next")
      ("p" git-timemachine-show-previous-revision "previous")
      ("c" git-timemachine-show-current-revision "current")
      ("b" git-timemachine-blame "blame")
      ("s" git-timemachine-switch-branch "switch branch")
      ("q" (kill-matching-buffers "timemachine" t t) "quit" :color blue))

    (add-hook 'git-timemachine-mode-hook
              (lambda () (hydra-timemachine/body))))
#+END_SRC
** Git link
#+BEGIN_SRC emacs-lisp
  (use-package git-link
      :general (my-leader :infix "g"
                "l" '("Generate link" . git-link)))
#+END_SRC
* Languages
** Lisp
*** Arg delimiters
#+BEGIN_SRC emacs-lisp
  (add-hook 'lisp-data-mode-hook (lambda () (setq-local evil-args-delimiters '(" "))))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :hook
    ;; We don't want to add lsp here because we should start lsp AFTER pyvenv kicks in
    (inferior-python-mode . hide-mode-line-mode)
    :config
    (setq flycheck-flake8-maximum-line-length 88)
    (setq lsp-clients-python-library-directories '("/usr/" "~/.local/bin/"))
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\venv\\'")
    (add-hook 'python-mode-hook
  			(lambda ()
  			  (setq indent-tabs-mode nil)
  			  (local-unset-key (kbd "<backspace>"))
  			  (local-unset-key (kbd ":")))))
#+END_SRC
*** Language Server
#+BEGIN_SRC emacs-lisp
  (use-package lsp-pyright
    :custom
    (lsp-pyright-multi-root nil))
#+END_SRC
*** Linter
My linter of choice is [[https://docs.astral.sh/ruff/][ruff]], and even tough it's officially included in Flycheck, the included
options are not the best and I've had some problems with it. That's why I'd rather define the
checker myself
#+BEGIN_SRC emacs-lisp
  (flycheck-define-checker python-ruff
    "A Python syntax and style checker using the ruff utility.
  To override the path to the ruff executable, set
  `flycheck-python-ruff-executable'.
  See URL `http://pypi.python.org/pypi/ruff'."
    :command ("ruff"
              "check"
  			(config-file "--config" flycheck-python-ruff-config)
              "--output-format=concise"
  			"--no-fix"
              (eval (when buffer-file-name
                      (concat "--stdin-filename=" buffer-file-name)))
              "-")
    :standard-input t
    :error-filter (lambda (errors)
                    (let ((errors (flycheck-sanitize-errors errors)))
                      (seq-map #'flycheck-flake8-fix-error-level errors)))
    :error-patterns
    ((warning line-start
              (file-name) ":" line ":" (optional column ":") " "
              (id (one-or-more (any alpha)) (one-or-more digit)) " "
              (message (one-or-more not-newline))
              line-end))
    :modes (python-mode))
#+END_SRC
*** Autoformat
#+BEGIN_SRC emacs-lisp
  ;; Add autoflake as an Apheleia formatter
  (add-to-list 'apheleia-formatters '(autoflake . ("autoflake" "-")))

  ;; Configure autoflake independently of it being added as a formatter
  (setf (alist-get 'autoflake apheleia-formatters)
        '("autoflake" "--remove-all-unused-imports" "-"))
  (setf (alist-get 'isort apheleia-formatters)
        '("isort" "--stdout" "-"))

  ;; Define order of formatters execution
  (setf (alist-get 'python-mode apheleia-mode-alist)
        '(autoflake ruff-isort ruff))
#+END_SRC
*** Enable Venv automatically
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv-auto
	:custom
	(pyvenv-auto-venv-dirnames '("venv" ".venv"))
	:hook (python-mode . pyvenv-auto-run)
	:init
	(add-hook 'pyvenv-post-activate-hooks 'lsp-deferred))
#+END_SRC
*** Pytest dispatcher
#+BEGIN_SRC emacs-lisp
  (use-package python-pytest
    :config
    (my-local-leader
      :keymaps 'python-mode-map
      :state 'normal
      "t" 'python-pytest-dispatch))
#+END_SRC
*** SVG tags
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
            (lambda ()
              (setq svg-tag-tags
                    '(("# TODO[([:alpha:][:blank:])]*[\b:]*" .
                       ((lambda (tag) (svg-tag-make tag
                                                    :face 'org-todo
                                                    :inverse t
                                                    :crop-right t
                                                    :padding 0
                                                    :beg 2
                                                    :end -1
                                                    :alignment 1))))
                      ("# TODO[([:alpha:][:blank:])]*[\b:]*\\(.*\\)" .
                       ((lambda (tag) (svg-tag-make tag :face 'org-todo :crop-left t))))))
              (svg-tag-mode t)))

#+END_SRC

*** Pretty symbols
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
            (lambda ()
              (push '("def"    . ?ƒ) prettify-symbols-alist)
              (push '("sum"    . ?Σ) prettify-symbols-alist)
              (push '("**2"    . ?²) prettify-symbols-alist)
              (push '("**3"    . ?³) prettify-symbols-alist)
              (push '("None"   . ?∅) prettify-symbols-alist)
              (push '("in"     . ?∈) prettify-symbols-alist)
              (push '("not in" . ?∉) prettify-symbols-alist)
              (push '("return" . ?➡) prettify-symbols-alist)
              (prettify-symbols-mode t)))
#+END_SRC

*** Debugging
#+BEGIN_SRC emacs-lisp
  (require 'dap-python)
  ;; if you installed debugpy, you need to set this
  ;; https://github.com/emacs-lsp/dap-mode/issues/306
  (setq dap-python-debugger 'debugpy)
#+END_SRC
** JavaScript
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :hook
    (js-mode . lsp-deferred)
    (js-mode . js2-minor-mode)
    :custom
    (js2-highlight-level 3)
    (js-indent-level 2))
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :hook
    (go-mode . lsp-deferred))
#+END_SRC
** PHP
#+BEGIN_SRC emacs-lisp
  (use-package php-mode)
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :config
    (my-local-leader
      :keymaps 'haskell-mode-map
      :state 'normal
      "m" 'haskell-interactive-switch
      "l" 'haskell-process-load-file)
    (my-local-leader
      :keymaps 'haskell-interactive-mode-map
      :state 'normal
      "m" 'haskell-interactive-switch-back))
#+END_SRC
** Markup
*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :custom (markdown-command "markdown_py"))
#+END_SRC
*** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :hook (yaml-mode . highlight-indent-guides-mode))
#+END_SRC
*** CSV
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :init
    (add-hook 'csv-mode-hook
              (lambda ()
                (csv-align-mode 1)
                (visual-line-mode -1)
                (toggle-truncate-lines t)))
    :config
    (general-define-key
     :keymaps 'csv-mode-map
     :states 'normal
     "L" 'csv-forward-field
     "H" 'csv-backward-field)
    (my-local-leader
      :keymaps 'csv-mode-map
      :states 'normal
      "a" '("Toggle align-mode" . csv-align-mode)
      "h" '("Toggle header" . csv-header-line)
      "s" '("Sort fields" . csv-sort-fields)))
#+END_SRC
** Bash
*** Linter
[[https://github.com/koalaman/shellcheck][ShellCheck]] is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts
#+BEGIN_SRC emacs-lisp
  (use-package sh-script
	:ensure nil
	:hook (sh-mode . lsp-deferred))
#+END_SRC
*** Autoformat
#+BEGIN_SRC emacs-lisp
   ;; The following formatting flags closely resemble Google's shell style defined in
   ;;       https://google.github.io/styleguide/shellguide.html
  (setf (alist-get 'shfmt apheleia-formatters)
		'("shfmt" "-i" "2" "-ci" "-bn"))
  (setf (alist-get 'sh-mode apheleia-mode-alist)
		'(shfmt))
#+END_SRC
** DSL
*** Jenkinsfile
#+BEGIN_SRC emacs-lisp
  (use-package jenkinsfile-mode)
#+END_SRC
*** PlantUML
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :straight (:host github :repo "radian-software/el-patch"
                        :fork "a1exsh")
    :custom
    (plantuml-default-exec-mode 'executable)
    :config
    (setq plantuml-output-type "png")
    (add-to-list 'auto-mode-alist '("\\.uml\\'" . plantuml-mode)))
#+END_SRC
*** Dockerfile
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC
*** Terraform
#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode)
#+END_SRC
*** Ledger
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :hook (ledger-mode . company-mode)
    :custom
    (ledger-complete-in-steps t)
    :config
    (setq ledger-reports '(("balance" "%(binary) -f %(ledger-file) bal")
                          ("real-balance" "%(binary) -f %(ledger-file) bal --cleared --real")
                          ("reg" "%(binary) -f %(ledger-file) reg")
                          ("payee" "%(binary) -f %(ledger-file) reg @%(payee)")
                          ("account" "%(binary) -f %(ledger-file) bal %(account)")))
    (my-local-leader
      :keymaps 'ledger-mode-map
      :state 'normal
      "a" 'ledger-add-transaction
      "b" 'ledger-display-balance-at-point
      "r" 'ledger-report)
    (add-hook 'ledger-mode-hook
              (lambda () (add-hook 'before-save-hook 'ledger-mode-clean-buffer nil 'local))))
#+END_SRC
**** Ledger Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-ledger)
#+END_SRC
* Packages to consider
- https://cestlaz.github.io/post/using-emacs-57-dired-narrow/
- https://github.com/akhramov/org-wild-notifier.el
- https://github.com/mineo/yatemplate
- [[https://github.com/ankurdave/color-identifiers-mode]]
* Cheatsheet
#+BEGIN_SRC emacs-lisp
  (use-package cheatsheet
    :general (my-leader
    	:infix aropie/help-prefix
    	:states '(normal visual motion)
    	"c" '("Cheatsheet" . aropie/cheatsheet-show-group))
    :config
    (defun aropie/cheatsheet-show-group ()
  	"Create buffer and show a single cheatsheet group."
  	(interactive)
  	(switch-to-buffer-other-window "*cheatsheet*")
  	(cheatsheet-mode)
  	(erase-buffer)
  	(let* ((group-names (mapcar (lambda (group) (plist-get group :name)) (cheatsheet-get)))
  		   (selected-group (completing-read "Cheatsheet: " group-names))
  		   (formated-group (list :name selected-group :cheats (cheatsheet--get-group selected-group))))
  	  (insert (cheatsheet--format-group formated-group)))
  	(setq buffer-read-only t))
    ;; Make q close the cheatsheet popup
    (general-define-key
     :states '(normal visual)
     :keymaps 'cheatsheet-mode-map
     "q" 'kill-buffer-and-window)
    ;; Make chatsheets behave like a popup
    (push '("*cheatsheet*" :noselect t) popwin:special-display-config)


    (cheatsheet-add-group "Text objects"
  						'(:key "i" :description "same or higher indentation")
  						'(:key "gx" :description "exchange objects"))

    (cheatsheet-add-group "Consult"
  						'(:key "C-. o" :description "open in other window"))

    (cheatsheet-add-group "Calc"
  						'(:key "TAB" :description "Exchange last two items in stack")
  						'(:key "t[i/o]" :description "Change focus [in/out] to trail window ")
  						'(:key "u" :description "Undo")
  						'(:key "DD" :description "Redo")
  						'(:key "n" :description "Make last value negative"))

    (cheatsheet-add-group "Marks, registers and macros"
  						'(:key "q <x>" :description "Record macro")
  						'(:key "@ <x>" :description "Replay macro")
  						'(:key "m <x>" :description "Mark the location. Capital letters are global")
  						'(:key "' <x>" :description "Goto mark")
  						'(:key "\" <x>" :description "Store in register. In normal/visual mode")
  						'(:key "C-r <x>" :description "Paste from register. In insert mode"))

    (cheatsheet-add-group "Common"
  						'(:key "s" :description "snipe")
  						'(:key "]r" :description "rotate")))
#+END_SRC
